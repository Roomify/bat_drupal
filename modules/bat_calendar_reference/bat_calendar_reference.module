<?php

/**
 * @file
 * Defines a field type for referencing event information
 */

use Drupal\Component\Utility\SafeMarkup;

/**
 * Retrieves an array of candidate referenceable booking units.
 *
 * @param array $field
 *   The field definition.
 * @param array $options
 *   An array of options to limit the scope of the returned list. The following
 *   key/value pairs are accepted:
 *   - string: string to filter unit names on (used by autocomplete).
 *   - match: operator to match the above string against, can be any of:
 *     'contains', 'equals', 'starts_with'. Defaults to 'contains'.
 *   - ids: array of specific unit ids to lookup.
 *   - limit: maximum size of the the result set. Defaults to 0 (no limit).
 *
 * @return array
 *   An array of valid units in the form:
 *   array(
 *     unit_id => array(
 *       'name' => The unit title,
 *       'rendered' => The text to display in widgets (can be HTML)
 *     ),
 *     ...
 *   )
 */
function bat_calendar_reference_units_potential_references($field, $options = array()) {
  // Fill in default options.
  $options += array(
    'string' => '',
    'match' => 'contains',
    'ids' => array(),
    'limit' => 0,
  );

  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = $field['field_name'] . ':' . $options['match'] . ':'
    . ($options['string'] !== '' ? $options['string'] : implode('-', $options['ids']))
    . ':' . $options['limit'];
  if (!isset($results[$cid])) {
    $references = FALSE;

    if ($references === FALSE) {
      $references = _bat_calendar_reference_units_potential_references($field, $options);
    }

    // Store the results.
    $results[$cid] = !empty($references) ? $references : array();
  }

  return $results[$cid];
}

/**
 * @param $field
 * @param $options
 *
 * @return array
 */
function _bat_calendar_reference_units_potential_references($field, $options) {
  // Avoid useless work.
  /*if (!isset($field['settings']['referenceable_unit_types'])) {
    return array();
  }

  if (!count($field['settings']['referenceable_unit_types'])) {
    return array();
  }*/

  $query = db_select('unit', 'u');
  $unit_unit_id_alias = $query->addField('u', 'id');
  $unit_name_alias = $query->addField('u', 'name', 'name');
  $unit_type_alias = $query->addField('u', 'type', 'type');

  if (is_array($field['settings']['referenceable_unit_types'])) {
    $referenceable_unit_types = array_filter($field['settings']['referenceable_unit_types']);
    if (!empty($referenceable_unit_types)) {
      $query->condition('u.type_id', array_filter($field['settings']['referenceable_unit_types']), 'IN');
    }
  }

  if ($options['string'] !== '') {
    switch ($options['match']) {
      case 'contains':
        $query->condition('u.name', '%' . $options['string'] . '%', 'LIKE');
        break;

      case 'starts_with':
        $query->condition('u.name', $options['string'] . '%', 'LIKE');
        break;

      case 'equals':
      default:
        // No match type or incorrect match type: use "=".
        $query->condition('u.name', $options['string']);
        break;
    }
  }

  if ($options['ids']) {
    $query->condition('u.id', $options['ids'], 'IN');
  }

  if ($options['limit']) {
    $query->range(0, $options['limit']);
  }

  $query
    ->orderBy($unit_name_alias)
    ->orderBy($unit_type_alias);

  $result = $query->execute()->fetchAll();
  $references = array();
  foreach ($result as $unit) {
    $references[$unit->unit_id] = array(
      'title'    => $unit->name,
      'rendered' => SafeMarkup::checkPlain($unit->name),
    );
  }

  return $references;
}

/**
 * @param $field
 * @param $options
 *
 * @return array
 */
function bat_calendar_reference_event_types_potential_references($field, $options = array()) {
  // Fill in default options.
  $options += array(
    'string' => '',
    'match' => 'contains',
    'ids' => array(),
    'limit' => 0,
  );

  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = $field['field_name'] . ':' . $options['match'] . ':'
    . ($options['string'] !== '' ? $options['string'] : implode('-', $options['ids']))
    . ':' . $options['limit'];
  if (!isset($results[$cid])) {
    $references = FALSE;

    if ($references === FALSE) {
      $references = _bat_calendar_reference_event_types_potential_references($field, $options);
    }

    // Store the results.
    $results[$cid] = !empty($references) ? $references : array();
  }

  return $results[$cid];
}

/**
 * @param $field
 * @param $options
 *
 * @return array
 */
function _bat_calendar_reference_event_types_potential_references($field, $options) {
  // Avoid useless work.
  if (!isset($field['settings']['referenceable_event_types'])) {
    return array();
  }

  if (!count($field['settings']['referenceable_event_types'])) {
    return array();
  }

  $query = db_select('bat_event_type', 'u');
  $unit_unit_id_alias = $query->addField('u', 'id');
  $event_type_label_alias = $query->addField('u', 'label', 'label');

  if (is_array($field['settings']['referenceable_event_types'])) {
    $referenceable_event_types = array_filter($field['settings']['referenceable_event_types']);
    if (!empty($referenceable_event_types)) {
      $query->condition('u.id', array_filter($field['settings']['referenceable_event_types']), 'IN');
    }
  }

  if ($options['string'] !== '') {
    switch ($options['match']) {
      case 'contains':
        $query->condition('u.label', '%' . $options['string'] . '%', 'LIKE');
        break;

      case 'starts_with':
        $query->condition('u.label', $options['string'] . '%', 'LIKE');
        break;

      case 'equals':
      default:
        // No match type or incorrect match type: use "=".
        $query->condition('u.label', $options['string']);
        break;
    }
  }

  if ($options['limit']) {
    $query->range(0, $options['limit']);
  }

  $query->orderBy($event_type_label_alias);

  $result = $query->execute()->fetchAll();
  $references = array();
  foreach ($result as $event_type) {
    $references[$event_type->id] = array(
      'title'    => $event_type->label,
      'rendered' => check_plain($event_type->label),
    );
  }

  return $references;
}

/**
 * @param $field
 * @param $options
 *
 * @return array
 */
function bat_calendar_reference_unit_types_potential_references($field, $options = array()) {
  // Fill in default options.
  $options += array(
    'string' => '',
    'match' => 'contains',
    'ids' => array(),
    'limit' => 0,
  );

  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = $field['field_name'] . ':' . $options['match'] . ':'
    . ($options['string'] !== '' ? $options['string'] : implode('-', $options['ids']))
    . ':' . $options['limit'];
  if (!isset($results[$cid])) {
    $references = FALSE;

    if ($references === FALSE) {
      $references = _bat_calendar_reference_unit_types_potential_references($field, $options);
    }

    // Store the results.
    $results[$cid] = !empty($references) ? $references : array();
  }

  return $results[$cid];
}

/**
 * @param $field
 * @param $options
 *
 * @return array
 */
function _bat_calendar_reference_unit_types_potential_references($field, $options) {
  $query = db_select('bat_types', 'u');
  $unit_unit_id_alias = $query->addField('u', 'type_id');
  $type_name_alias = $query->addField('u', 'name', 'name');

  if ($options['string'] !== '') {
    switch ($options['match']) {
      case 'contains':
        $query->condition('u.name', '%' . $options['string'] . '%', 'LIKE');
        break;

      case 'starts_with':
        $query->condition('u.name', $options['string'] . '%', 'LIKE');
        break;

      case 'equals':
      default:
        // No match type or incorrect match type: use "=".
        $query->condition('u.name', $options['string']);
        break;
    }
  }

  if ($options['limit']) {
    $query->range(0, $options['limit']);
  }

  $query->orderBy($type_name_alias);

  $result = $query->execute()->fetchAll();
  $references = array();
  foreach ($result as $unit_type) {
    $references[$unit_type->type_id] = array(
      'title'    => $unit_type->name,
      'rendered' => check_plain($unit_type->name),
    );
  }

  return $references;
}

/**
 * Value callback for a bat_calendar_reference autocomplete element.
 *
 * Replace the unit id with a unit name.
 */
function bat_calendar_reference_unit_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    $unit_id = $element['#default_value'];

    if (!empty($unit_id)) {
      if ($unit = bat_unit_load($unit_id)) {
        $value = $unit->name;
        $value .= ' [unit_id:' . $unit_id . ']';

        return $value;
      }
      else {
        return '';
      }
    }
  }
}

/**
 * Value callback for a bat_calendar_reference autocomplete element.
 *
 * Replace the unit type id with a unit type name.
 */
function bat_calendar_reference_unit_type_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    $type_id = $element['#default_value'];

    if (!empty($type_id)) {
      if ($unit_type = bat_type_load($type_id)) {
        $value = $unit_type->name;
        $value .= ' [type_id:' . $type_id . ']';

        return $value;
      }
      else {
        return '';
      }
    }
  }
}

/**
 * Value callback for a bat_calendar_reference autocomplete element.
 *
 * Replace the event type id with a event type label.
 */
function bat_calendar_reference_event_type_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    $event_type = $element['#default_value'];

    if (!empty($event_type)) {
      if ($type = bat_event_type_load($event_type)) {
        $value = $type->label;
        $value .= ' [event_type_id:' . $event_type . ']';

        return $value;
      }
      else {
        return '';
      }
    }
  }
}

/**
 * Validate unit.
 */
function bat_calendar_reference_autocomplete_unit_validate($element, &$form_state, $form) {
  /*$parents = $element['#array_parents'];
  array_pop($parents);
  $field_widget = drupal_array_get_nested_value($form, $parents);

  $field = field_widget_field($field_widget, $form_state);
  $instance = field_widget_instance($field_widget, $form_state);

  $value = $element['#value'];
  $unit_id = NULL;

  if (!empty($value)) {
    // Check whether we have an explicit "[unit_id:n]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*unit_id\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      list(, $title, $unit_id) = $matches;
      if (!empty($title)) {
        $unit = bat_unit_load($unit_id);
        $real_title = $unit->name;
        if (trim($title) != trim($real_title)) {
          form_error($element, t('%name: title mismatch. Please check your selection.', array('%name' => $instance['label'])));
        }
      }
    }
    else {
      $options = array(
        'string' => $value,
        'match' => 'equals',
        'limit' => 1,
      );
      $references = bat_calendar_reference_units_potential_references($field, $options);
      if ($references) {
        $unit_id = key($references);
      }
      else {
        form_error($element, t('%name: unable to find a unit with that title.', array('%name' => $instance['label'])));
      }
    }
  }

  form_set_value($element, $unit_id, $form_state);*/
}

/**
 * Validate unit type.
 */
function bat_calendar_reference_autocomplete_unit_type_validate($element, &$form_state, $form) {
  /*$parents = $element['#array_parents'];
  array_pop($parents);
  $field_widget = drupal_array_get_nested_value($form, $parents);

  $field = field_widget_field($field_widget, $form_state);
  $instance = field_widget_instance($field_widget, $form_state);

  $value = $element['#value'];
  $type_id = NULL;

  if (!empty($value)) {
    // Check whether we have an explicit "[type_id:n]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*type_id\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      list(, $title, $type_id) = $matches;
      if (!empty($title)) {
        $unit = bat_type_load($type_id);
        $real_title = $unit->name;
        if (trim($title) != trim($real_title)) {
          form_error($element, t('%name: title mismatch. Please check your selection.', array('%name' => $instance['label'])));
        }
      }
    }
    else {
      $options = array(
        'string' => $value,
        'match' => 'equals',
        'limit' => 1,
      );
      $references = bat_calendar_reference_unit_types_potential_references($field, $options);
      if ($references) {
        $unit_id = key($references);
      }
      else {
        form_error($element, t('%name: unable to find a unit type with that title.', array('%name' => $instance['label'])));
      }
    }
  }

  form_set_value($element, $type_id, $form_state);*/
}

/**
 * Validate event type.
 */
function bat_calendar_reference_autocomplete_event_type_validate($element, &$form_state, $form) {
  /*$parents = $element['#array_parents'];
  array_pop($parents);
  $field_widget = drupal_array_get_nested_value($form, $parents);

  $field = field_widget_field($field_widget, $form_state);
  $instance = field_widget_instance($field_widget, $form_state);

  $value = $element['#value'];
  $type_id = NULL;

  if (!empty($value)) {
    // Check whether we have an explicit "[event_type_id:n]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*event_type_id\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      list(, $title, $type_id) = $matches;
      if (!empty($title)) {
        $event_type = bat_event_type_load($type_id);
        $real_title = $event_type->label;
        if (trim($title) != trim($real_title)) {
          form_error($element, t('%name: title mismatch. Please check your selection.', array('%name' => $instance['label'])));
        }
      }
    }
    else {
      $options = array(
        'string' => $value,
        'match' => 'equals',
        'limit' => 1,
      );
      $references = bat_calendar_reference_event_types_potential_references($field, $options);
      if ($references) {
        $type_id = key($references);
      }
      else {
        form_error($element, t('%name: unable to find an event type with that title.', array('%name' => $instance['label'])));
      }
    }
  }

  form_set_value($element, $type_id, $form_state);*/
}
