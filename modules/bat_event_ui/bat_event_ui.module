<?php

/**
 * @file
 * Manages availability for Bookable Units and displaying dates on the jquery
 * FullCalendar plugin.
 */

define('BAT_EVENT_CALENDAR_ADMIN_STYLE', 1);
define('BAT_EVENT_CALENDAR_GENERIC_STYLE', 2);

/**
 * Implements hook_libraries_info().
 */
function bat_event_ui_libraries_info() {
  $libraries['moment'] = array(
    'name' => 'Moment',
    'vendor url' => 'http://momentjs.com',
    'download url' => 'http://momentjs.com/downloads/moment.min.js',
    'version arguments' => array(
      'file' => 'moment.min.js',
      // 2.10.6
      'pattern' => '/(\d+\.\d+\.\d)/',
    ),
    'files' => array(
      'js' => array(
        'moment.min.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'moment.min.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'moment.js',
          ),
        ),
      ),
    ),
  );

  $libraries['fullcalendar'] = array(
    'name' => 'Full Calendar',
    'vendor url' => 'http://fullcalendar.io',
    'download url' => 'https://github.com/arshaw/fullcalendar/releases/download/v2.5.0/fullcalendar-2.5.0.zip',
    'version arguments' => array(
      'file' => 'fullcalendar.js',
      // 2.5.0
      'pattern' => '/v(\d+\.\d+\.\d)/',
      'lines' => 3,
    ),
    'files' => array(
      'js' => array(
        'fullcalendar.js',
        'gcal.js',
      ),
      'css' => array(
        'fullcalendar.css',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'fullcalendar.min.js',
            'gcal.js',
          ),
          'css' => array(
            'fullcalendar.min.css',
          ),
        ),
        'dependencies' => array('moment (>=2.10.6)'),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'fullcalendar.js',
            'gcal.js',
          ),
          'css' => array(
            'fullcalendar.css',
          ),
        ),
        'dependencies' => array('moment (>=2.10.6)'),
      ),
    ),
  );

  $libraries['fullcalendar-scheduler'] = array(
    'name' => 'Fullcalendar Scheduler',
    'vendor url' => 'http://fullcalendar.io',
    'download url' => 'https://github.com/fullcalendar/fullcalendar-scheduler/releases/download/v1.1.0/fullcalendar-scheduler-1.1.0.zip',
    'version arguments' => array(
      'file' => 'scheduler.min.js',
      // 1.1.0
      'pattern' => '/(\d+\.\d+\.\d)/',
    ),
    'files' => array(
      'js' => array(
        'scheduler.min.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'scheduler.min.js',
          ),
          'css' => array(
            'scheduler.min.css',
          ),
        ),
        'dependencies' => array('moment (>=2.10.6)', 'fullcalendar (>=2.5.0)'),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'scheduler.js',
          ),
          'css' => array(
            'scheduler.css',
          ),
        ),
        'dependencies' => array('moment (>=2.10.6)', 'fullcalendar (>=2.5.0)'),
      ),
    ),
  );

  return $libraries;
}

/**
 * Checks if the FullCalendar Library is loaded.
 *
 * @return bool
 *   A boolean indicating the FullCalendar status.
 */
function bat_fullcalendar_loaded() {
  if (bat_library_loaded('fullcalendar', 'minified')) {
    return TRUE;
  }
  else {
    // Alert the authorized user/administrator to the abscence of the library.
    drupal_set_message(t('The FullCalendar Library could not be found.
                          Please check the installation instructions and the <a href="@status">Status Report</a>. Make sure
                          to clear cache after updating settings and/or library locations.',
      array('@status' => url('admin/reports/status'))), 'warning');
    return FALSE;
  }
}

function bat_fullcalendar_scheduler_loaded() {
  if (bat_library_loaded('fullcalendar-scheduler', 'minified')) {
    return TRUE;
  }
  else {
    // Alert the authorized user/administrator to the abscence of the library.
    drupal_set_message(t('The FullCalendar Scheduler Library could not be found.
                          Please check the installation instructions and the <a href="@status">Status Report</a>. Make sure
                          to clear cache after updating settings and/or library locations.',
      array('@status' => url('admin/reports/status'))), 'warning');
    return FALSE;
  }
}

/**
 * Implements hook_permission().
 */
function bat_availability_permission() {
  $permissions = array(
    'administer bat_unit availability' => array(
      'title' => t('Administer unit availability'),
      'description' => t('Allows users to access bulk availability operations for bookable units.'),
      'restrict access' => TRUE,
    ),
    'view anonymous availability information' => array(
      'title' => t('View anonymous availability information'),
      'description' => t('Allow users to view anonymous availability info (especially via availability reference field).'),
    ),
    'view named availability information' => array(
      'title' => t('View named availability information'),
      'description' => t('Allow users to view named availability info (especially via availability reference field).'),
    ),
    'view past availability information' => array(
      'title' => t('View past availability information'),
      'description' => t('Allow users to view availability info in the past (especially via availability reference field).'),
    ),
    'update availability own bat_unit entities' => array(
      'title' => t('Edit availability own bookable units of any type'),
    ),
    'update availability any bat_unit entity' => array(
      'title' => t('Edit availability any bookable unit of any type'),
    ),
  );

  // Generate permissions per unit type.
  foreach (bat_unit_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      'update availability own bat_unit entities of bundle ' . $type_name => array(
        'title' => t('Edit availability own %type_name bookable units', array('%type_name' => $type->label)),
      ),
      'update availability any bat_unit entity of bundle ' . $type_name => array(
        'title' => t('Edit availability any %type_name bookable unit', array('%type_name' => $type->label)),
      ),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function bat_event_ui_menu() {
  $items = array();

  $items['admin/bat/units/unit/%bat_unit/events'] = array(
    'title' => 'Calendar events',
    'page callback' => 'bat_event_calendar_page',
    'page arguments' => array(4, 6, 7),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('update availability', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => '20',
  );

  $items['admin/bat/units/unit/%bat_unit/event'] = array(
    'title' => 'Event Management',
    'page callback' => 'bat_availability_event_manager_page',
    'page arguments' => array(4),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('update availability', 4),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  $items['admin/bat/units/bulk_unit_management'] = array(
    'title' => 'Bulk availability management',
    'page callback' => 'bat_availability_bulk_unit_management',
    'page arguments' => array(4, 5, 6),
    'access arguments' => array('administer bat_unit availability'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Form for the Bulk Availability Management.
 *
 * Could receive date params for the interested interval to edit.
 *
 * @param string $year
 *   Year to perform the operations.
 * @param string $month
 *   Month to perform the operations.
 * @param string $type
 *   Bookable unit type to perform the operation.
 *
 * @return array
 *   Bulk availability management page render array.
 */
function bat_availability_bulk_unit_management($year = '', $month = '', $type = 'all') {
  // Load FullCalendar.
  bat_fullcalendar_loaded();

  // Modal includes and style.
  bat_event_ui_modal_style();

  drupal_add_library('system', 'drupal.vertical-tabs');

  // If year is not set then give it the current date.
  $year = ($year != '' && is_numeric($year)) ? $year : date('Y', time());
  $month = ($month != '' && is_numeric($month)) ? $month : date('n', time());
  $type = ($type == '') ? 'all' : $type;

  // It's not a valid unit type.
  if (bat_unit_get_types($type) == FALSE) {
    $type = 'all';
  }

  // It's not a valid month.
  if ($month < 1 || $month > 12) {
    $month = 1;
  }

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'bat_unit');
  $efq->addTag('bat_availability_access');
  if ($type != 'all') {
    $efq->entityCondition('bundle', $type, '=');
  }
  $efq->pager(20);
  $bat_units = $efq->execute();

  $bat_id = $units = array();
  if ($bat_units) {
    $units = array_values(entity_load('bat_unit', array_keys($bat_units['bat_unit'])));

    $bat_id = array();
    foreach ($units as $value) {
      $bat_id[] = $value->unit_id;
    }
  }

  $js_file = drupal_get_path('module', 'bat_event_ui') . '/js/bat_unit_management.js';
  $css_file = drupal_get_path('module', 'bat_event_ui') . '/css/bat_event_ui.css';
  // Show full day events on calendar.
  if (variable_get('bat_calendar_events_view', '0') == '1') {
    $js_file = drupal_get_path('module', 'bat_event_ui') . '/js/bat_unit_management_full_day.js';
  }
  // Return the full render array.
  return array(
    drupal_get_form('bat_filter_month_form', $month, $year),
    array(),
    array(
      '#theme' => 'pager',
    ),
    '#attached' => array(
      'css' => array($css_file),
      'js' => array(
        $js_file,
        drupal_get_path('module', 'bat') . '/js/bat_fullcalendar_singlerowmonth.js',
        array(
          'data' => array(
            'batUnitManagement' => array(
              'batNumber' => count($bat_id),
              'currentMonth' => $month,
              'currentYear' => $year,
              'batId' => $bat_id,
            ),
          ),
          'type' => 'setting',
        ),
      ),
    ),
  );
}

/**
 * Callback for admin/bat/units/unit/%unit/events
 */
function bat_event_calendar_page(BatUnit $bat_unit, $year = '', $month = '') {
  // Set the page title.
  drupal_set_title(t('Edit @unit_name Availability', array('@unit_name' => $bat_unit->name)));

  // Add styles.
  bat_event_ui_modal_style();

  drupal_add_library('system', 'drupal.vertical-tabs');

  // Get the current page's URL, striped of the year and month args.
  // This allows us to place this page anywhere, including at
  // unit/%/availability  or  admin/bat/units/unit/%/availability
  list($url) = explode('/' . $year . '/' . $month, current_path());

  $js_file = drupal_get_path('module', 'bat_event_ui') . '/js/bat_event_ui.js';
  $css_file = drupal_get_path('module', 'bat_event_ui') . '/css/bat_event_ui.css';
  // Show full day events on calendar.
  if (variable_get('bat_calendar_events_view', '0') == '1') {
    $js_file = drupal_get_path('module', 'bat_event_ui') . '/js/bat_availability_full_day.js';
  }
  return array(
    '#theme' => 'bat_three_month_calendar',
    '#url' => $url,
    '#form' => array(),
    '#year' => $year,
    '#month' => $month,
    '#attached' => array(
      'css' => array(
        $css_file,
      ),
      'js' => array(
        $js_file,
        array(
          'data' => array('batAvailability' => array('unitID' => $bat_unit->unit_id)),
          'type' => 'setting',
        ),
      ),
    ),
  );
}

/**
 * Helper function to determine the $event style depending on permissions.
 */
function bat_availability_get_style($event_style, $unit) {
  $event_style = is_numeric($event_style) ? (int) $event_style : (int) BAT_EVENT_CALENDAR_ADMIN_STYLE;

  // If user don't have 'view named availability information' permission.
  if (!(user_access('view named availability information') || bat_unit_access('update availability', $unit))
    && $event_style == BAT_EVENT_CALENDAR_ADMIN_STYLE) {
    $event_style = (int) BAT_EVENT_CALENDAR_GENERIC_STYLE;
  }

  return $event_style;
}

/**
 * The EventManager page shows when clicking on an event in the availability
 * calendar - will allow a user to manipulate that event.
 */
function bat_availability_event_manager_page($unit, $event_id = NULL, $start_date = 0, $end_date = 0) {
  // Include modal library.
  ctools_include('modal');

  // If any info missing we cannot load the event.
  if ($event_id == NULL || $start_date == 0 || $end_date == 0) {
    $output[] = ctools_modal_command_dismiss();
    drupal_set_message(t('Unable to load event.'), 'error');
  }

  // Basic check to avoid damage from dirty input.
  $event_id = check_plain($event_id);
  $start_date = check_plain($start_date);
  $end_date = check_plain($end_date);

  // Process start and end date.
  $sd = new DateTime();
  $sd->setTimezone(new DateTimeZone('UTC'))->setTimestamp($start_date);

  $ed = new DateTime();
  $ed->setTimezone(new DateTimeZone('UTC'))->setTimestamp($end_date);

  $booked = FALSE;
  if ($event_id > 10 || $event_id < -10) {
    $booked = TRUE;
  }

  if ($booked) {
    $booking_id = bat_availability_return_id($event_id);
    $booking = bat_event_load($booking_id);
    // For existing bookings allow to edit in the modal.
    module_load_include('inc', 'bat_event', 'bat_event.admin');
    $form_state = array(
      'title' => t('Edit booking'),
      'ajax' => TRUE,
      'build_info' => array(
        'args' => array($booking),
        'files' => array(
          'bat_event_admin' => array(
            'module' => 'bat_event',
            'name' => 'bat_event.admin',
            'type' => 'inc',
          ),
        ),
      ),
    );
    // Wrap the form via ctools modal.
    $output = ctools_modal_form_wrapper('bat_event_edit_form', $form_state);
    if ($form_state['executed']) {
      if (!empty($form_state['booking_deleted'])) {
        // If there are messages for the form, render them.
        $messages = theme('status_messages');

        $output = array();
        // If the form has not yet been rendered, render it.
        $output[] = ctools_modal_command_display(t('Booking deleted'), $messages);
      }
      else {
        $output = array(ctools_modal_command_dismiss());
      }
    }
    print ajax_render($output);
    exit();
  }

  ctools_modal_render(t('Event Management'), drupal_get_form('bat_availability_event_manager_form', $unit, $event_id, $sd, $ed));
}

/**
 * Define modal JS style and dependencies.
 */
function bat_event_ui_modal_style() {
  // Include libraries.
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();

  // Styles to use for the modal.
  $modal_style = array(
    'bat-modal-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 400,
        'height' => 400,
        'addWidth' => 0,
        'addHeight' => 0,
      ),
      'modalOptions' => array(
        'opacity' => .0,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
    ),
  );

  // Add the ctool modal configuration to settings.
  drupal_add_js($modal_style, 'setting');

  // Add the ctools modal stylesheet.
  drupal_add_css(drupal_get_path('module', 'bat') . '/css/bat_modal.css');
}

/**
 * The Event Manager Form.
 */
function bat_availability_event_manager_form($form, $form_state, $unit, $event_id, $start_date, $end_date) {
  $form = array();
  $new_event_id = $event_id;

  if (isset($form_state['values']['change_event_status'])) {
    $new_event_id = $form_state['values']['change_event_status'];
  }

  $state_options = bat_unit_state_options();

  $form['#attributes']['class'][] = 'bat-management-form bat-event-form';

  // This entire form element will be replaced whenever 'changethis' is updated.
  $form['#prefix'] = '<div id="replace_textfield_div">';
  $form['#suffix'] = '</div>';

  $form['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit->unit_id,
  );

  $form['event_id'] = array(
    '#type' => 'hidden',
    '#value' => $event_id,
  );

  $form['bat_start_date'] = array(
    '#type' => 'hidden',
    '#value' => $start_date,
  );

  $form['bat_end_date'] = array(
    '#type' => 'hidden',
    '#value' => $end_date,
  );

  if ($event_id == -2) {
    $form['event_title'] = array(
      '#prefix' => '<h2>',
      '#markup' => check_plain($unit->name),
      '#suffix' => '</h2>',
    );
  }
  else {
    $form['event_title'] = array(
      '#prefix' => '<h2>',
      '#markup' => t('@unit_name is @status', array('@unit_name' => $unit->name, '@status' => $state_options[$new_event_id])),
      '#suffix' => '</h2>',
    );
  }

  $date_format = variable_get('bat_date_format', 'd-m-Y');
  $form['event_details'] = array(
    '#prefix' => '<div class="event-details">',
    '#markup' => t('Duration: @startdate to @enddate', array('@startdate' => $start_date->format($date_format), '@enddate' => $end_date->format($date_format))),
    '#suffix' => '</div>',
  );

  unset($state_options[$new_event_id]);

  $form['change_event_status'] = array(
    '#title' => t('Change the state for this event to:') . ' ',
    '#type' => 'select',
    '#options' => $state_options,
    '#ajax' => array(
      'callback' => 'bat_availability_ajax_event_status_change',
      'wrapper' => 'replace_textfield_div',
    ),
    '#empty_option' => t('- Select -'),
  );

  if (module_exists('bat_event') && $new_event_id != 89) {
    $booking_types = bat_event_get_types();

    foreach ($booking_types as $type) {
      $book_end_date = clone($end_date);

      // If we select one day from the calendar, postpone the departure date.
      if ($start_date == $end_date) {
        $book_end_date = $book_end_date->add(new DateInterval('P1D'));
      }

      $form['order']['order_link'][$type->type] = array(
        '#type' => 'markup',
        '#markup' => '<div>' . l(t('Create @booking_type', array('@booking_type' => $type->label)), 'admin/bat/bookings/add/' . $type->type, array('query' => array('startdate' => $start_date->getTimestamp(), 'enddate' => $book_end_date->getTimestamp(), 'unitid' => $unit->unit_id))) . '</div>',
      );
    }
  }

  return $form;
}

/**
 * The callback for the change_event_status widget of the event manager form.
 */
function bat_availability_ajax_event_status_change($form, $form_state) {
  $start_date = $form_state['values']['bat_start_date'];
  $end_date = $form_state['values']['bat_end_date'];
  $unit_id = $form_state['values']['unit_id'];
  $event_id = $form_state['values']['event_id'];
  $new_event_id = $form_state['values']['change_event_status'];

  // If we have a new event id go ahead and update event.
  if (($event_id != $new_event_id) && $new_event_id != -1) {
    $event = new BookingEvent($unit_id, $new_event_id, $start_date, $end_date);
    $uc = new UnitCalendar($unit_id);
    $responses = $uc->updateCalendar(array($event));

    $state_options = bat_unit_state_options();
    if ($event_id >= -1) {
      $form['form_wrapper_bottom']['#markup'] = t('Updated event from <strong>@old_status</strong> to <strong>@new_status</strong>.', array('@old_status' => $state_options[$event_id], '@new_status' => $state_options[$new_event_id]));
    }
    else {
      $form['form_wrapper_bottom']['#markup'] = t('New Event state is <strong>@state</strong>.', array('@state' => $state_options[$new_event_id]));
    }
  }

  return $form;
}

/**
 * Sets event ids.
 */
function bat_availability_assign_id($id, $status = '1') {
  // Add eleven for now - this allows for 10 states that do not
  // refer to a specific booking.
  $id = $id + 11;

  if ($status == '0') {
    return -($id);
  }
  else {
    return $id;
  }
}

/**
 * Given an event state it returns the valid booking id.
 */
function bat_availability_return_id($id) {
  // Make sure we are not looking for negative ids;
  $id = abs($id);

  $id = $id - 11;

  return $id;
}

/**
 * Implements hook_theme().
 */
function bat_event_ui_theme() {
  return array(
    'bat_one_month_calendar' => array(
      'template' => 'bat_one_month_calendar',
      'variables' => array(
        'url' => NULL,
        'form' => NULL,
        'year' => NULL,
        'month' => NULL,
        'link_options' => NULL,
      ),
    ),
    'bat_three_month_calendar' => array(
      'template' => 'bat_three_month_calendar',
      'variables' => array(
        'url' => NULL,
        'form' => NULL,
        'year' => NULL,
        'month' => NULL,
        'link_options' => NULL,
      ),
    ),
  );
}

/**
 * Default implementation of hook_preprocess_bat_one_month_calendar().
 */
function bat_event_ui_preprocess_bat_one_month_calendar(&$vars) {

  // Load FullCalendar Scheduler.
  bat_fullcalendar_scheduler_loaded();

  // Add css styles for one-month-calendar.
  drupal_add_css(drupal_get_path('module', 'bat_event_ui') . '/css/bat_one_month_calendar.css');
  drupal_add_css(drupal_get_path('module', 'bat_event_ui') . '/css/fullcalendar.theme.css');

  // If dates are not provided then use the current date.
  $year = (empty($vars['year'])) ? date('Y', time()) : check_plain($vars['year']);
  $month = (empty($vars['month'])) ? date('n', time()) : check_plain($vars['month']);

  $schedulerlicense = variable_get('bat_fullcalendar_scheduler_key', 'non-commercial');
  if ($schedulerlicense == 'gpl') {
    $schedulerlicensekey = 'GPL-My-Project-Is-Open-Source';
  }
  elseif ($schedulerlicense == 'non-commercial') {
    $schedulerlicensekey = 'CC-Attribution-NonCommercial-NoDerivatives';
  }
  elseif ($schedulerlicense == 'commercial') {
    $schedulerlicensekey = variable_get('bat_fullcalendar_scheduler_commercial_key', '');
  }

  // Inject settings in javascript that will be used to setup the one months
  // display.
  drupal_add_js(array('batCalendar' => array('currentMonth' => intval($month))), 'setting');
  drupal_add_js(array('batCalendar' => array('currentYear' => intval($year))), 'setting');
  drupal_add_js(array('batCalendar' => array('firstDay' => intval(variable_get('date_first_day', 0)))), 'setting');
  drupal_add_js(array('batCalendar' => array('schedulerLicenseKey' => $schedulerlicensekey)), 'setting');
}

/**
 * Default implementation of hook_preprocess_bat_three_month_calendar().
 *
 * Here we setup the three-month calendar based on a specified year,
 * month, and url.
 */
function bat_event_ui_preprocess_bat_three_month_calendar(&$vars) {

  // Load FullCalendar.
  bat_fullcalendar_loaded();

  // Add css styles for three-month-calendar.
  drupal_add_css(drupal_get_path('module', 'bat_event_ui') . '/css/bat_three_month_calendar.css');
  drupal_add_css(drupal_get_path('module', 'bat_event_ui') . '/css/fullcalendar.theme.css');

  // If dates are not provided then use the current date.
  $year = (empty($vars['year'])) ? date('Y', time()) : check_plain($vars['year']);
  $month = (empty($vars['month'])) ? date('n', time()) : check_plain($vars['month']);

  // Inject settings in javascript that will be used to setup the three months
  // display.
  drupal_add_js(array('batCalendar' => array('currentMonth' => intval($month))), 'setting');
  drupal_add_js(array('batCalendar' => array('currentYear' => intval($year))), 'setting');
  drupal_add_js(array('batCalendar' => array('firstDay' => intval(variable_get('date_first_day', 0)))), 'setting');

  // Calculate forward and back dates for the 3-month view calendar.
  $date1 = new DateTime("$year-$month-1");
  $date2 = new DateTime("$year-$month-1");
  $date_current = new DateTime("now");

  $forward = $date1->add(new DateInterval('P3M'));
  $backward = $date2->sub(new DateInterval('P3M'));

  // Create the links based off the url variable passed in.
  if (!isset($vars['url'])) {
    $vars['url'] = '';
  }

  $forward_path = $vars['url'] . '/' . $forward->format('Y') . '/' . $forward->format('n');
  $backward_path = $vars['url'] . '/' . $backward->format('Y') . '/' . $backward->format('n');
  $current_path = $vars['url'] . '/' . $date_current->format('Y') . '/' . $date_current->format('n');

  if (!is_array($vars['link_options']) || empty($vars['link_options'])) {
    $vars['link_options'] = array();
  }
  $vars['forward_link'] = l(t('Forward'), $forward_path, $vars['link_options']);
  $vars['backward_link'] = l(t('Back'), $backward_path, $vars['link_options']);
  $vars['current_link'] = l(t('Current'), $current_path, $vars['link_options']);
}
