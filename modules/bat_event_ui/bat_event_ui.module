<?php

/**
 * @file
 * Manages events for Units and displaying dates on the jquery
 * FullCalendar plugin.
 */

define('BAT_EVENT_CALENDAR_ADMIN_STYLE', 1);
define('BAT_EVENT_CALENDAR_GENERIC_STYLE', 2);



/**
 * Implements hook_menu().
 */
function bat_event_ui_menu() {
  $items = array();

  $items['admin/bat/calendar'] = array(
    'title' => 'Calendar',
    'page callback' => 'bat_event_ui_calendar_page',
    'page arguments' => array(3, 4),
    'access arguments' => array('administer calendar events'),
    'type' => MENU_CALLBACK,
    'weight' => 20,
  );

  return $items;
}


/**
 * Callback for admin/bat/events/
 */
function bat_event_ui_calendar_page($unit_type, $event_type) {
  // Set the page title.
  drupal_set_title(t('View Event Data'));

  // Pick what modal style to use
  $calendar_settings['modal_style'] = 'default';

  if ($type = bat_event_type_load($event_type)) {
    $event_granularity = $type->event_granularity;
  }
  else {
    $event_granularity = 'both';
  }

  $event_types = bat_event_get_types();
  $ev_type = reset($event_types);
  $event_type = $ev_type->type;

  // All Drupal JS settings inside the batCalendar object.
  $fc_user_settings = array(
    'batCalendar' => array(
      array(
        'unitType' => $unit_type,
        'eventType' => $event_type,
        'eventGranularity' =>  $event_granularity,
      ),
    ),
  );

  $calendar_settings['user_settings'] = $fc_user_settings;
  $calendar_settings['calendar_id'] = 'fullcalendar-scheduler';

  if ($ev_type->fixed_event_states) {
    $calendar_settings['class'] = array('fixed_event_states');
  }
  else {
    $calendar_settings['class'] = array('open_event_states');
  }

  drupal_add_css(drupal_get_path('module', 'bat_event_ui') . '/css/bat_event_ui.css');

  $render_array = array(
    'event_type_form' => drupal_get_form('bat_event_ui_event_type_form', $unit_type, $event_type),
    'calendar' => array(
      '#theme' => 'bat_fullcalendar',
      '#calendar_settings' => $calendar_settings,
    ),
  );

  return $render_array;
}

/**
 * "Event type" and "Unit type" to shows in the calendar view.
 */
function bat_event_ui_event_type_form($form, &$form_state, $unit_type, $event_type) {
  if (isset($form_state['values']['event_types'])) {
    $event_type = $form_state['values']['event_types'];
  }

  $event_types = bat_event_get_types();
  foreach ($event_types as $ev_type) {
    $event_types_options[$ev_type->type] = $ev_type->label;
  }

  $form['event_types'] = array(
    '#type' => 'select',
    '#title' => 'Event type',
    '#options' => $event_types_options,
    '#default_value' => $event_type,
    '#ajax' => array(
      'callback' => 'bat_event_ui_event_type_form_callback',
      'wrapper' => 'unit-type-wrapper',
    ),
  );

  $types = bat_unit_get_types();
  if (!empty($types)) {
    $types_options = array(
      'all' => t('All'),
    );

    foreach ($types as $type) {
      $type_bundle = bat_type_bundle_load($type->type);

      if (is_array($type_bundle->default_event_value_field_ids)) {
        if (isset($type_bundle->default_event_value_field_ids[$event_type]) && !empty($type_bundle->default_event_value_field_ids[$event_type])) {
          $types_options[$type->type_id] = $type->name;
        }
      }
    }

    $form['unit_type'] = array(
      '#type' => 'select',
      '#title' => 'Unit type',
      '#options' => $types_options,
      '#default_value' => $unit_type,
      '#prefix' => '<div id="unit-type-wrapper">',
      '#suffix' => '</div>',
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Change',
  );

  return $form;
}

/**
 * Ajax callback for bat_event_ui_event_type_form form.
 */
function bat_event_ui_event_type_form_callback($form, &$form_state) {
  return $form['unit_type'];
}

/**
 * Submit callback for bat_event_ui_event_type_form form.
 */
function bat_event_ui_event_type_form_submit($form, &$form_state) {
  $type = $form_state['values']['unit_type'];
  $event_type = $form_state['values']['event_types'];

  $form_state['redirect'] = 'admin/bat/calendar/' . $type . '/' . $event_type;
}
