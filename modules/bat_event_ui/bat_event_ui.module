<?php

/**
 * @file
 * Manages events for Units and displaying dates on the jquery
 * FullCalendar plugin.
 */

define('BAT_EVENT_CALENDAR_ADMIN_STYLE', 1);
define('BAT_EVENT_CALENDAR_GENERIC_STYLE', 2);

/**
 * Implements hook_libraries_info().
 */
function bat_event_ui_libraries_info() {
  $libraries['moment'] = array(
    'name' => 'Moment',
    'vendor url' => 'http://momentjs.com',
    'download url' => 'http://momentjs.com/downloads/moment.min.js',
    'version arguments' => array(
      'file' => 'moment.min.js',
      // 2.10.6
      'pattern' => '/(\d+\.\d+\.\d)/',
    ),
    'files' => array(
      'js' => array(
        'moment.min.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'moment.min.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'moment.js',
          ),
        ),
      ),
    ),
  );

  $libraries['fullcalendar'] = array(
    'name' => 'Full Calendar',
    'vendor url' => 'http://fullcalendar.io',
    'download url' => 'https://github.com/arshaw/fullcalendar/releases/download/v2.6.0/fullcalendar-2.6.0.zip',
    'version arguments' => array(
      'file' => 'fullcalendar.js',
      // 2.6.0
      'pattern' => '/v(\d+\.\d+\.\d)/',
      'lines' => 3,
    ),
    'files' => array(
      'js' => array(
        'fullcalendar.js',
        'gcal.js',
      ),
      'css' => array(
        'fullcalendar.css',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'fullcalendar.min.js',
            'gcal.js',
          ),
          'css' => array(
            'fullcalendar.min.css',
          ),
        ),
        'dependencies' => array('moment (>=2.10.6)'),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'fullcalendar.js',
            'gcal.js',
          ),
          'css' => array(
            'fullcalendar.css',
          ),
        ),
        'dependencies' => array('moment (>=2.10.6)'),
      ),
    ),
  );

  $libraries['fullcalendar-scheduler'] = array(
    'name' => 'Fullcalendar Scheduler',
    'vendor url' => 'http://fullcalendar.io',
    'download url' => 'https://github.com/fullcalendar/fullcalendar-scheduler/releases/download/v1.2.0/fullcalendar-scheduler-1.2.0.zip',
    'version arguments' => array(
      'file' => 'scheduler.min.js',
      // 1.2.0
      'pattern' => '/(\d+\.\d+\.\d)/',
    ),
    'files' => array(
      'js' => array(
        'scheduler.min.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'scheduler.min.js',
          ),
          'css' => array(
            'scheduler.min.css',
          ),
        ),
        'dependencies' => array('moment (>=2.10.6)', 'fullcalendar (>=2.6.0)'),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'scheduler.js',
          ),
          'css' => array(
            'scheduler.css',
          ),
        ),
        'dependencies' => array('moment (>=2.10.6)', 'fullcalendar (>=2.6.0)'),
      ),
    ),
  );
  return $libraries;
}

/**
 * Helper function to check if a library is loaded properly or not.
 *
 * @return bool
 *   Boolean indicating if the library is properly loaded or not.
 */
function bat_event_ui_library_loaded($name, $variant = NULL) {
  return ($library = libraries_load($name, $variant)) && !empty($library['loaded']);
}

/**
 * Implements hook_permission().
 */
function bat_event_ui_permission() {
  $permissions = array(
    'administer calendar events' => array(
      'title' => t('Administer calendar events'),
      'description' => t('Allows users to manipulate events on calendar.'),
      'restrict access' => TRUE,
    ),
    'view past event information' => array(
      'title' => t('View past event information'),
      'description' => t('Allow users to view event info in the past (especially via event reference field).'),
    ),
    'update calendar events of own bat_unit entities' => array(
      'title' => t('Edit calendar events of own units of any type'),
    ),
    'update calendar events of any bat_unit entity' => array(
      'title' => t('Edit calendar events of any unit of any type'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function bat_event_ui_menu() {
  $items = array();

  $items['admin/bat/calendar'] = array(
    'title' => 'Calendar',
    'page callback' => 'bat_event_ui_calendar_page',
    'page arguments' => array(3, 4),
    'access arguments' => array('administer calendar events'),
    'type' => MENU_CALLBACK,
    'weight' => 20,
  );

  $items['admin/bat/calendar/%bat_unit/event'] = array(
    'title' => 'Event Management',
    'page callback' => 'bat_event_ui_event_manager_page',
    'page arguments' => array(3),
    'access arguments' => array('administer calendar events'),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  $items['admin/bat/config/fullcalendar'] = array(
    'title' => 'Fullcalendar',
    'description' => 'Configure settings for Fullcalendar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bat_event_ui_fullcalendar_settings'),
    'access arguments' => array('configure bat settings'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 30,
  );

  return $items;
}

/**
 * The EventManager page shows when clicking on an event in the
 * calendar - will allow a user to manipulate that event.
 */
function bat_event_ui_event_manager_page($unit, $event_type, $event_id = NULL, $start_date = 0, $end_date = 0) {
  // Include modal library.
  ctools_include('modal');

  // If any info missing we cannot load the event.
  if ($event_id == NULL || $start_date == 0 || $end_date == 0) {
    $output[] = ctools_modal_command_dismiss();
    drupal_set_message(t('Unable to load event.'), 'error');
  }

  // Basic check to avoid damage from dirty input.
  $event_id = check_plain($event_id);
  $start_date = check_plain($start_date);
  $end_date = check_plain($end_date);

  // Process start and end date.
  $sd = new DateTime($start_date);
  $ed = new DateTime($end_date);

  if ($event_id > 0) {
    $event = bat_event_load($event_id);
    // For existing bookings allow to edit in the modal.
    module_load_include('inc', 'bat_event', 'bat_event.admin');
    $form_state = array(
      'title' => t('Edit event'),
      'ajax' => TRUE,
      'build_info' => array(
        'args' => array($event),
        'files' => array(
          'bat_event' => array(
            'module' => 'bat_event',
            'name' => 'bat_event.admin',
            'type' => 'inc',
          ),
        ),
      ),
    );
    // Wrap the form via ctools modal.
    $output = ctools_modal_form_wrapper('bat_event_edit_form', $form_state);
    if ($form_state['executed']) {
      $output = array(ctools_modal_command_dismiss());
    }

    print ajax_render($output);
    exit();
  }

  ctools_modal_render(t('Event Management'), drupal_get_form('bat_event_ui_event_manager_form', $unit, $event_type, $event_id, $sd, $ed));
}

/**
 * The Event Manager Form.
 */
function bat_event_ui_event_manager_form($form, $form_state, $unit, $event_type, $event_id, $start_date, $end_date) {
  $form = array();
  $new_event_id = $event_id;

  if (isset($form_state['values']['change_event_status'])) {
    $new_event_id = $form_state['values']['change_event_status'];
  }

  $state_options = bat_unit_state_options($event_type);

  $form['#attributes']['class'][] = 'bat-management-form bat-event-form';

  // This entire form element will be replaced whenever 'changethis' is updated.
  $form['#prefix'] = '<div id="replace_textfield_div">';
  $form['#suffix'] = '</div>';

  $form['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit->unit_id,
  );

  $form['event_type'] = array(
    '#type' => 'hidden',
    '#value' => $event_type,
  );

  $form['event_id'] = array(
    '#type' => 'hidden',
    '#value' => $event_id,
  );

  $form['bat_start_date'] = array(
    '#type' => 'hidden',
    '#value' => $start_date,
  );

  $form['bat_end_date'] = array(
    '#type' => 'hidden',
    '#value' => $end_date,
  );

  if ($event_id == -2) {
    $form['event_title'] = array(
      '#prefix' => '<h2>',
      '#markup' => check_plain($unit->name),
      '#suffix' => '</h2>',
    );
  }
  else {
    $form['event_title'] = array(
      '#prefix' => '<h2>',
      '#markup' => t('@unit_name', array('@unit_name' => $unit->name)),
      '#suffix' => '</h2>',
    );
  }

  $date_format = variable_get('bat_date_format', 'Y-m-d H:i');
  $form['event_details'] = array(
    '#prefix' => '<div class="event-details">',
    '#markup' => t('Date range selected: @startdate to @enddate', array('@startdate' => $start_date->format($date_format), '@enddate' => $end_date->format($date_format))),
    '#suffix' => '</div>',
  );

  unset($state_options[$new_event_id]);

  $form['change_event_status'] = array(
    '#title' => t('Change the state for this event to:') . ' ',
    '#type' => 'select',
    '#options' => $state_options,
    '#ajax' => array(
      'callback' => 'bat_event_ui_ajax_event_status_change',
      'wrapper' => 'replace_textfield_div',
    ),
    '#empty_option' => t('- Select -'),
  );

  return $form;
}

/**
 * The callback for the change_event_status widget of the event manager form.
 */
function bat_event_ui_ajax_event_status_change($form, $form_state) {
  global $user;

  $start_date = $form_state['values']['bat_start_date'];
  $end_date = $form_state['values']['bat_end_date'];
  $unit_id = $form_state['values']['unit_id'];
  $event_id = $form_state['values']['event_id'];
  $event_type = $form_state['values']['event_type'];
  $state_id = $form_state['values']['change_event_status'];

  // If we have a new event id, go ahead and create a new event.
  if (($event_id != $new_event_id) && $new_event_id != -1) {
    $event = bat_event_create(array('type' => $event_type));
    $event->created = REQUEST_TIME;
    $event->uid = $user->uid;

    $event->start_date = $start_date->format('Y-m-d H:i');
    // Always subtract one minute from the end time. FullCalendar provides
    // start and end time with the assumption that the last minute is *excluded*
    // while BAT deals with times assuming that the last minute is included.
    $end_date->sub(new DateInterval('PT1M'));
    $event->end_date = $end_date->format('Y-m-d H:i');

    $event->event_unit_reference[LANGUAGE_NONE][0]['target_id'] = $unit_id;
    $event->event_state_reference[LANGUAGE_NONE][0]['state_id'] = $state_id;

    $event->save();

    $state_options = bat_unit_state_options($event_type);
    $form['form_wrapper_bottom']['#markup'] = t('New Event state is <strong>@state</strong>.', array('@state' => $state_options[$state_id]));
  }

  return $form;
}

/**
 * Callback for admin/bat/events/
 */
function bat_event_ui_calendar_page($unit_type, $event_type) {
  // Set the page title.
  drupal_set_title(t('View Event Data'));

  // Add styles.
  bat_event_ui_modal_style();

  drupal_add_library('system', 'drupal.vertical-tabs');

  $js_file = drupal_get_path('module', 'bat_event_ui') . '/js/bat_event_ui.js';
  $css_file = drupal_get_path('module', 'bat_event_ui') . '/css/bat_event_ui.css';

  // Show full day events on calendar.
  if (variable_get('bat_calendar_events_view', '0') == '1') {
    $js_file = drupal_get_path('module', 'bat_event_ui') . '/js/bat_event_full_day.js';
  }
  return array(
    '#theme' => 'bat_one_month_calendar',
    '#form' => drupal_get_form('bat_event_ui_event_type_form'),
    '#attached' => array(
      'css' => array(
        $css_file,
      ),
      'js' => array(
        $js_file,
        array(
          'data' => array('batEvent' => array('unitType' => $unit_type, 'eventType' => $event_type)),
          'type' => 'setting',
        ),
      ),
    ),
  );
}

/**
 * Helper function to determine the $event style depending on permissions.
 */
function bat_event_ui_get_style($event_style, $unit) {
  $event_style = is_numeric($event_style) ? (int) $event_style : (int) BAT_EVENT_CALENDAR_ADMIN_STYLE;

  // If user don't have 'view named availability information' permission.
  if (!(user_access('view named availability information') || bat_unit_access('update availability', $unit))
    && $event_style == BAT_EVENT_CALENDAR_ADMIN_STYLE) {
    $event_style = (int) BAT_EVENT_CALENDAR_GENERIC_STYLE;
  }

  return $event_style;
}

/**
 * Define modal JS style and dependencies.
 */
function bat_event_ui_modal_style() {
  // Include libraries.
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();

  // Styles to use for the modal.
  $modal_style = array(
    'bat-modal-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 450,
        'height' => 500,
        'addWidth' => 0,
        'addHeight' => 0,
      ),
      'modalOptions' => array(
        'opacity' => .0,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
    ),
  );

  // Add the ctool modal configuration to settings.
  drupal_add_js($modal_style, 'setting');

  // Add the ctools modal stylesheet.
  drupal_add_css(drupal_get_path('module', 'bat') . '/css/bat_modal.css');
}

/**
 * Implements hook_theme().
 */
function bat_event_ui_theme() {
  return array(
    'bat_one_month_calendar' => array(
      'template' => 'bat_one_month_calendar',
      'variables' => array(
        'url' => NULL,
        'form' => NULL,
        'year' => NULL,
        'month' => NULL,
        'event_type' => NULL,
        'link_options' => NULL,
      ),
    ),
  );
}

/**
 * Default implementation of hook_preprocess_bat_one_month_calendar().
 */
function bat_event_ui_preprocess_bat_one_month_calendar(&$vars) {

  // Load FullCalendar.
  bat_event_ui_library_loaded('fullcalendar-scheduler', 'source');


  // Add css styles for one-month-calendar.
  drupal_add_css(drupal_get_path('module', 'bat_event_ui') . '/css/bat_one_month_calendar.css');
  drupal_add_css(drupal_get_path('module', 'bat_event_ui') . '/css/fullcalendar.theme.css');

  // If dates are not provided then use the current date.
  $year = (empty($vars['year'])) ? date('Y', time()) : check_plain($vars['year']);
  $month = (empty($vars['month'])) ? date('n', time()) : check_plain($vars['month']);

  if (empty($vars['event_type'])) {
    $event_types = bat_event_get_types();
    $ev_type = reset($event_types);
    $event_type = $ev_type->type;
  }
  else {
    $event_type = $vars['event_type'];
  }

  $schedulerlicense = variable_get('bat_fullcalendar_scheduler_key', 'non-commercial');
  if ($schedulerlicense == 'gpl') {
    $schedulerlicensekey = 'GPL-My-Project-Is-Open-Source';
  }
  elseif ($schedulerlicense == 'non-commercial') {
    $schedulerlicensekey = 'CC-Attribution-NonCommercial-NoDerivatives';
  }
  elseif ($schedulerlicense == 'commercial') {
    $schedulerlicensekey = variable_get('bat_fullcalendar_scheduler_commercial_key', '');
  }

  // Inject settings in javascript that will be used to setup the one months
  // display.
  drupal_add_js(array('batCalendar' => array('currentMonth' => intval($month))), 'setting');
  drupal_add_js(array('batCalendar' => array('currentYear' => intval($year))), 'setting');
  drupal_add_js(array('batCalendar' => array('firstDay' => intval(variable_get('date_first_day', 0)))), 'setting');
  drupal_add_js(array('batCalendar' => array('eventType' => $event_type)), 'setting');
  drupal_add_js(array('batCalendar' => array('schedulerLicenseKey' => $schedulerlicensekey)), 'setting');
}

/**
 *
 */
function bat_event_ui_event_type_form($form, &$form_state) {
  $form = array();

  $event_types = bat_event_get_types();
  foreach ($event_types as $event_type) {
    $event_types_options[$event_type->type] = $event_type->label;
  }

  $ev_types = array_keys($event_types_options);
  $ev_type = reset($ev_types);

  $event_types_options = array('all' => t('All')) + $event_types_options;

  $form['event_types'] = array(
    '#type' => 'select',
    '#title' => 'Event type',
    '#options' => $event_types_options,
    '#default_value' => (arg(4)) ? arg(4) : $ev_type,
  );

  $types = bat_unit_get_types();
  if (!empty($types)) {
    $types_options = array(
      'all' => t('All'),
    );
    foreach ($types as $type) {
      $types_options[$type->type_id] = $type->name;
    }
    $form['unit_type'] = array(
      '#type' => 'select',
      '#title' => 'Unit type',
      '#options' => $types_options,
      '#default_value' => (arg(3)) ? arg(3) : 'all',
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Change',
  );

  return $form;
}

/**
 *
 */
function bat_event_ui_event_type_form_submit($form, &$form_state) {
  // Check the type.
  isset($form_state['values']['unit_type']) ? $type = $form_state['values']['unit_type'] : $type = arg(3);

  // Check the event type.
  isset($form_state['values']['event_types']) ? $event_type = $form_state['values']['event_types'] : $event_type = arg(4);

  $form_state['redirect'] = arg(0) . '/' . arg(1) . '/' . arg(2) . '/' . $type . '/' . $event_type;
}

/**
 *
 */
function bat_event_ui_fullcalendar_settings($form, &$form_state) {
  $form['bat_fullcalendar_scheduler'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="label-settings">',
    '#suffix' => '</div>',
  );

  $form['bat_fullcalendar_scheduler']['bat_fullcalendar_scheduler_key'] = array(
    '#type' => 'radios',
    '#title' => t('FullCalendar Scheduler License'),
    '#default_value' => variable_get('bat_fullcalendar_scheduler_key', 'non-commercial'),
    '#options' => array (
      'commercial' => t('Commercial License'),
      'non-commercial' => t('Non-Commercial Creative Commons'),
      'gpl' => t('GPL License'),
    ),
    '#ajax' => array(
      'callback' => 'bat_event_ui_fullcalendar_settings_ajax_callback',
      'wrapper' => 'label-settings',
    ),
  );

  if ((!isset($form_state['values']['bat_fullcalendar_scheduler_key']) && $form['bat_fullcalendar_scheduler']['bat_fullcalendar_scheduler_key']['#default_value'] == 'commercial') || (isset($form_state['values']['bat_fullcalendar_scheduler_key']) && $form_state['values']['bat_fullcalendar_scheduler_key'] == 'commercial')) {
    $form['bat_fullcalendar_scheduler']['bat_fullcalendar_scheduler_commercial_key'] = array(
      '#type' => 'textfield',
      '#title' => t('FullCalendar Scheduler Commercial License Key'),
      '#required' => TRUE,
      '#default_value' => variable_get('bat_fullcalendar_scheduler_commercial_key', ''),
    );
  }

  return system_settings_form($form);
}

/**
 * Ajax callback for bat_event_ui_fullcalendar_settings form.
 */
function bat_event_ui_fullcalendar_settings_ajax_callback($form, $form_state) {
  return $form['bat_fullcalendar_scheduler'];
}
