<?php

/**
 * @file
 * Manages availability for Bookable Units and displaying dates on the jquery
 * FullCalendar plugin.
 */

use \Drupal\bat_availability\BookingEvent;
use \Drupal\bat_availability\UnitCalendar;


define('BAT_AVAILABILITY_ADMIN_STYLE', 1);
define('BAT_AVAILABILITY_GENERIC_STYLE', 2);

/**
 * Implements hook_permission().
 */
function bat_availability_permission() {
  $permissions = array(
    'administer bat_unit availability' => array(
      'title' => t('Administer unit availability'),
      'description' => t('Allows users to access bulk availability operations for bookable units.'),
      'restrict access' => TRUE,
    ),
    'view anonymous availability information' => array(
      'title' => t('View anonymous availability information'),
      'description' => t('Allow users to view anonymous availability info (especially via availability reference field).'),
    ),
    'view named availability information' => array(
      'title' => t('View named availability information'),
      'description' => t('Allow users to view named availability info (especially via availability reference field).'),
    ),
    'view past availability information' => array(
      'title' => t('View past availability information'),
      'description' => t('Allow users to view availability info in the past (especially via availability reference field).'),
    ),
    'update availability own bat_unit entities' => array(
      'title' => t('Edit availability own bookable units of any type'),
    ),
    'update availability any bat_unit entity' => array(
      'title' => t('Edit availability any bookable unit of any type'),
    ),
  );

  // Generate permissions per unit type.
  foreach (bat_unit_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      'update availability own bat_unit entities of bundle ' . $type_name => array(
        'title' => t('Edit availability own %type_name bookable units', array('%type_name' => $type->label)),
      ),
      'update availability any bat_unit entity of bundle ' . $type_name => array(
        'title' => t('Edit availability any %type_name bookable unit', array('%type_name' => $type->label)),
      ),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function bat_availability_menu() {
  $items = array();

  $items['admin/bat/units/unit/%bat_unit/availability'] = array(
    'title' => 'Manage Availability',
    'page callback' => 'bat_availability_page',
    'page arguments' => array(4, 6, 7),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('update availability', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => '20',
  );

  $items['admin/bat/units/unit/%bat_unit/event'] = array(
    'title' => 'Event Management',
    'page callback' => 'bat_availability_event_manager_page',
    'page arguments' => array(4),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('update availability', 4),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  $items['admin/bat/units/bulk_unit_management'] = array(
    'title' => 'Bulk availability management',
    'page callback' => 'bat_availability_bulk_unit_management',
    'page arguments' => array(4, 5, 6),
    'access arguments' => array('administer bat_unit availability'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_query_TAG_alter().
 */
function bat_availability_query_bat_availability_access_alter(QueryAlterableInterface $query) {
  // Look for unit base table to pass to the query altering function or else
  // assume we don't have the tables we need to establish order related altering
  // right now.
  foreach ($query->getTables() as $table) {
    if ($table['table'] === 'bat_units') {
      bat_entity_access_query_alter($query, 'bat_unit', $table['alias'], NULL, 'update availability');
      break;
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function bat_availability_entity_delete($entity, $type) {
  if ($type == 'bat_unit') {
    // Remove data related to entity from bat_availability table.
    db_delete('bat_availability')
      ->condition('unit_id', $entity->unit_id)
      ->execute();
  }
}

/**
 * Form for the Bulk Availability Management.
 *
 * Could receive date params for the interested interval to edit.
 *
 * @param string $year
 *   Year to perform the operations.
 * @param string $month
 *   Month to perform the operations.
 * @param string $type
 *   Bookable unit type to perform the operation.
 *
 * @return array
 *   Bulk availability management page render array.
 */
function bat_availability_bulk_unit_management($year = '', $month = '', $type = 'all') {
  // Load FullCalendar.
  bat_fullcalendar_loaded();

  // Modal includes and style.
  bat_availability_modal_style();

  drupal_add_library('system', 'drupal.vertical-tabs');

  // If year is not set then give it the current date.
  $year = ($year != '' && is_numeric($year)) ? $year : date('Y', time());
  $month = ($month != '' && is_numeric($month)) ? $month : date('n', time());
  $type = ($type == '') ? 'all' : $type;

  // It's not a valid unit type.
  if (bat_unit_get_types($type) == FALSE) {
    $type = 'all';
  }

  // It's not a valid month.
  if ($month < 1 || $month > 12) {
    $month = 1;
  }

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'bat_unit');
  $efq->addTag('bat_availability_access');
  if ($type != 'all') {
    $efq->entityCondition('bundle', $type, '=');
  }
  $efq->pager(20);
  $bat_units = $efq->execute();

  $bat_id = $units = array();
  if ($bat_units) {
    $units = array_values(entity_load('bat_unit', array_keys($bat_units['bat_unit'])));

    $bat_id = array();
    foreach ($units as $value) {
      $bat_id[] = $value->unit_id;
    }
  }

  $js_file = drupal_get_path('module', 'bat_availability') . '/js/bat_unit_management.js';
  $css_file = drupal_get_path('module', 'bat_availability') . '/css/bat_availability.css';
  // Show full day events on calendar.
  if (variable_get('bat_calendar_events_view', '0') == '1') {
    $js_file = drupal_get_path('module', 'bat_availability') . '/js/bat_unit_management_full_day.js';
  }
  // Return the full render array.
  return array(
    drupal_get_form('bat_filter_month_form', $month, $year),
    drupal_get_form('bat_availability_update_status_form', $month, $year, $type, $units),
    array(
      '#theme' => 'pager',
    ),
    '#attached' => array(
      'css' => array($css_file),
      'js' => array(
        $js_file,
        drupal_get_path('module', 'bat') . '/js/bat_fullcalendar_singlerowmonth.js',
        array(
          'data' => array(
            'batUnitManagement' => array(
              'batNumber' => count($bat_id),
              'currentMonth' => $month,
              'currentYear' => $year,
              'batId' => $bat_id,
            ),
          ),
          'type' => 'setting',
        ),
      ),
    ),
  );
}

/**
 * Form to manage the availability for specific month.
 *
 * @see bat_availability_bulk_unit_management()
 */
function bat_availability_update_status_form($form, &$form_state, $month, $year, $type, $bat_units) {

  $form['#attributes']['class'][] = 'bat-management-form bat-bulk-availability-form';

  $form['bat_availability_update'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Availability'),
    '#description' => t('Change the availability status of the units selected below for the specified date range.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['bat_update_availability']['curr_month'] = array(
    '#type' => 'hidden',
    '#value' => $month,
  );

  $form['bat_update_availability']['curr_year'] = array(
    '#type' => 'hidden',
    '#value' => $year,
  );

  $form['bat_update_availability']['curr_type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );

  $form['bat_availability_update']['bat_date_range'] = bat_date_range_fields($year, $month);

  $state_options = bat_unit_state_options();
  $form['bat_availability_update']['change_event_status'] = array(
    '#title' => t('Bookable Unit State'),
    '#type' => 'select',
    '#options' => $state_options,
    '#empty_option' => t('- Select -'),
  );

  $form['bat_availability_update']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  $form['bat_availability_update']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Unit Availability'),
  );

  $form['#validate'][] = 'bat_form_start_end_dates_validate';
  $form['#validate'][] = 'bat_availability_update_status_form_validate';

  $form['bat_data'] = array(
    '#prefix' => '<table class="bat-month-manager">',
    '#type' => 'container',
    '#suffix' => '</tbody></table>',
  );

  if (count($bat_units) > 0) {
    $date = new DateTime();
    $date->setDate($year, $month, '01');
    $form['bat_data']['select-all'] = array(
      '#type' => 'select',
      '#prefix' => '<thead><tr><th class="unit-bulk-select">',
      '#options' => array(
        BAT_THIS_PAGE => t('All (this page)'),
        BAT_ALL_PAGES => t('All (all pages)'),
        BAT_NONE => t('None')),
      '#empty_option' => t('- Select -'),
      '#suffix' => '</th><th class="month-name"><div class="fc-header-title"><h2>' . format_date($date->getTimestamp(), 'custom', 'F Y') . '</h2></div></th></tr></thead><tbody>',
    );
  }

  foreach ($bat_units as $key => $value) {
    $form['bat_data']['bat-' . $value->unit_id] = array(
      '#type' => 'checkbox',
      '#title' => $value->name,
      '#prefix' => '<tr><th class="unit-name">',
      '#suffix' => '</th><td  class="unit-days"><div id="calendar' . $key . '"></div></td></tr>',
    );

  }

  return $form;
}

/**
 * Validate callback for bat_availability_update_status_form form.
 */
function bat_availability_update_status_form_validate(&$form, &$form_state) {
  if ($form_state['values']['change_event_status'] == '') {
    form_set_error('change_event_status', t('Select a valid status.'));
  }
  // Validate that a unit is selected.
  bat_validate_unit($form_state);
}

/**
 * Submit callback for bat_availability_update_status_form form.
 */
function bat_availability_update_status_form_submit(&$form, &$form_state) {
  list($start_date, $end_date) = bat_form_input_get_start_end_dates($form_state);
  $type = $form_state['values']['curr_type'];
  $event_id = $form_state['values']['change_event_status'];

  if ($form_state['values']['select-all'] == BAT_ALL_PAGES) {
    $query = db_select('bat_units', 'n')->fields('n', array('unit_id', 'name'));
    if ($type != 'all') {
      $query->condition('type', $type, '=');
    }
    $bat_units = $query->execute()->fetchAll();

    foreach ($bat_units as $unit) {
      $unit_id = $unit->unit_id;

      // Create a new Booking Event.
      $be = new BookingEvent($unit_id, $event_id, $start_date, $end_date);
      $events = array($be);
      $rc = new UnitCalendar($unit_id);
      $response = $rc->updateCalendar($events);
      if ($response[$event_id] == BAT_BLOCKED) {
        drupal_set_message($unit->name . ' - ' . t('Could not update calendar because a locked event is blocking the update - you need to unlock any locked events in that period.'), 'warning');
      }
      elseif ($response[$event_id] == BAT_UPDATED) {
        drupal_set_message($unit->name . ' - ' . t('Calendar Updated'));
      }
    }
  }
  else {
    foreach ($form_state['values'] as $key => $value) {
      if (strpos($key, 'bat-') === 0 && $value == '1') {
        $unit_id = str_replace('bat-', '', $key);

        // Create a new Booking Event.
        $be = new BookingEvent($unit_id, $event_id, $start_date, $end_date);
        $events = array($be);
        $rc = new UnitCalendar($unit_id);
        $response = $rc->updateCalendar($events);
        if ($response[$event_id] == BAT_BLOCKED) {
          drupal_set_message($form_state['complete form']['bat_data'][$key]['#title'] . ' - ' . t('Could not update calendar because a locked event is blocking the update - you need to unlock any locked events in that period.'), 'warning');
        }
        elseif ($response[$event_id] == BAT_UPDATED) {
          drupal_set_message($form_state['complete form']['bat_data'][$key]['#title'] . ' - ' . t('Calendar Updated'));
        }
      }
    }
  }
}

/**
 * Callback for admin/bat/units/unit/%unit/availability - builds availability
 * page by adding calendar and pulling events from availability table.
 */
function bat_availability_page(BatUnit $bat_unit, $year = '', $month = '') {
  // Set the page title.
  drupal_set_title(t('Edit @unit_name Availability', array('@unit_name' => $bat_unit->name)));

  // Add styles.
  bat_availability_modal_style();

  drupal_add_library('system', 'drupal.vertical-tabs');

  // Get the current page's URL, striped of the year and month args.
  // This allows us to place this page anywhere, including at
  // unit/%/availability  or  admin/bat/units/unit/%/availability
  list($url) = explode('/' . $year . '/' . $month, current_path());

  $js_file = drupal_get_path('module', 'bat_availability') . '/js/bat_availability.js';
  $css_file = drupal_get_path('module', 'bat_availability') . '/css/bat_availability.css';
  // Show full day events on calendar.
  if (variable_get('bat_calendar_events_view', '0') == '1') {
    $js_file = drupal_get_path('module', 'bat_availability') . '/js/bat_availability_full_day.js';
  }
  return array(
    '#theme' => 'bat_three_month_calendar',
    '#url' => $url,
    '#form' => drupal_get_form('update_availability_calendar_form', $bat_unit->unit_id, $year, $month),
    '#year' => $year,
    '#month' => $month,
    '#attached' => array(
      'css' => array(
        $css_file,
      ),
      'js' => array(
        $js_file,
        array(
          'data' => array('batAvailability' => array('unitID' => $bat_unit->unit_id)),
          'type' => 'setting',
        ),
      ),
    ),
  );
}

/**
 * A basic form that allows us to update the state of the calendar.
 */
function update_availability_calendar_form($form, &$form_state, $unit_id, $year, $month) {

  $form['#attributes']['class'][] = 'bat-management-form bat-availability-calendar-form';

  $form['bat_update_availability'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Unit Availability'),
    '#description' => t('Change the availability status for a specified date range.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['bat_update_availability']['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );

  $form['bat_update_availability']['bat_date_range'] = bat_date_range_fields();
  // Unset a js setting.
  drupal_add_js(array('bat' => array('batBookingStartDay' => 0)), 'setting');

  $state_options = bat_unit_state_options();
  $form['bat_update_availability']['unit_state'] = array(
    '#type' => 'select',
    '#title' => t('Change status to'),
    '#options' => $state_options,
  );

  $form['bat_update_availability']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['bat_update_availability']['#submit'])) {
    $submit += $form['bat_update_availability']['#submit'];
  }

  $form['bat_update_availability']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Availability'),
    '#submit' => $submit + array('update_availability_calendar_form_submit'),
  );

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'bat_form_start_end_dates_validate';

  return $form;
}

/**
 * Update Availability submit function.
 */
function update_availability_calendar_form_submit(&$form, &$form_state) {
  list($start_date, $end_date) = bat_form_input_get_start_end_dates($form_state);
  $event_id = $form_state['values']['unit_state'];
  $unit_id = $form_state['values']['unit_id'];

  // Consider right START DATE and END DATE for all events.
  $end_date->sub(new DateInterval('P1D'));
  // Create a new Booking Event.
  $be = new BookingEvent($unit_id, $event_id, $start_date, $end_date);
  $events = array($be);
  $rc = new UnitCalendar($unit_id);
  $response = $rc->updateCalendar($events);
  if ($response[$event_id] == BAT_BLOCKED) {
    drupal_set_message(t('Could not update calendar because a locked event is blocking the update - you need to unlock any locked events in that period.'), 'warning');
  }
  elseif ($response[$event_id] == BAT_UPDATED) {
    drupal_set_message(t('Calendar Updated'));
  }
}

/**
 * Helper function to determine the $event style depending on permissions.
 */
function bat_availability_get_style($event_style, $unit) {
  $event_style = is_numeric($event_style) ? (int) $event_style : (int) BAT_AVAILABILITY_ADMIN_STYLE;

  // If user don't have 'view named availability information' permission.
  if (!(user_access('view named availability information') || bat_unit_access('update availability', $unit))
    && $event_style == BAT_AVAILABILITY_ADMIN_STYLE) {
    $event_style = (int) BAT_AVAILABILITY_GENERIC_STYLE;
  }

  return $event_style;
}

/**
 * The EventManager page shows when clicking on an event in the availability
 * calendar - will allow a user to manipulate that event.
 */
function bat_availability_event_manager_page($unit, $event_id = NULL, $start_date = 0, $end_date = 0) {
  // Include modal library.
  ctools_include('modal');

  // If any info missing we cannot load the event.
  if ($event_id == NULL || $start_date == 0 || $end_date == 0) {
    $output[] = ctools_modal_command_dismiss();
    drupal_set_message(t('Unable to load event.'), 'error');
  }

  // Basic check to avoid damage from dirty input.
  $event_id = check_plain($event_id);
  $start_date = check_plain($start_date);
  $end_date = check_plain($end_date);

  // Process start and end date.
  $sd = new DateTime();
  $sd->setTimezone(new DateTimeZone('UTC'))->setTimestamp($start_date);

  $ed = new DateTime();
  $ed->setTimezone(new DateTimeZone('UTC'))->setTimestamp($end_date);

  $booked = FALSE;
  if ($event_id > 10 || $event_id < -10) {
    $booked = TRUE;
  }

  if ($booked) {
    $booking_id = bat_availability_return_id($event_id);
    $booking = bat_booking_load($booking_id);
    // For existing bookings allow to edit in the modal.
    module_load_include('inc', 'bat_booking', 'bat_booking.admin');
    $form_state = array(
      'title' => t('Edit booking'),
      'ajax' => TRUE,
      'build_info' => array(
        'args' => array($booking),
        'files' => array(
          'bat_booking_admin' => array(
            'module' => 'bat_booking',
            'name' => 'bat_booking.admin',
            'type' => 'inc',
          ),
        ),
      ),
    );
    // Wrap the form via ctools modal.
    $output = ctools_modal_form_wrapper('bat_booking_edit_form', $form_state);
    if ($form_state['executed']) {
      if (!empty($form_state['booking_deleted'])) {
        // If there are messages for the form, render them.
        $messages = theme('status_messages');

        $output = array();
        // If the form has not yet been rendered, render it.
        $output[] = ctools_modal_command_display(t('Booking deleted'), $messages);
      }
      else {
        $output = array(ctools_modal_command_dismiss());
      }
    }
    print ajax_render($output);
    exit();
  }

  // If the event is blocked, show an error message.
  $uc = new UnitCalendar($unit->unit_id);
  $mock_event = new BookingEvent($unit->unit_id, NULL, $sd, $ed);
  if ($uc->eventBlocked($mock_event)) {
    drupal_set_message(t('You can not update calendar because a locked event is blocking the update. You need to unlock any locked events in that period.'), 'warning');
    $output = theme('status_messages');
    ctools_modal_render(t('Event Management'), $output);
    return;
  }

  ctools_modal_render(t('Event Management'), drupal_get_form('bat_availability_event_manager_form', $unit, $event_id, $sd, $ed));
}

/**
 * Define modal JS style and dependencies.
 */
function bat_availability_modal_style() {
  // Include libraries.
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();

  // Styles to use for the modal.
  $modal_style = array(
    'bat-modal-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 400,
        'height' => 400,
        'addWidth' => 0,
        'addHeight' => 0,
      ),
      'modalOptions' => array(
        'opacity' => .0,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
    ),
  );

  // Add the ctool modal configuration to settings.
  drupal_add_js($modal_style, 'setting');

  // Add the ctools modal stylesheet.
  drupal_add_css(drupal_get_path('module', 'bat') . '/css/bat_modal.css');
}

/**
 * The Event Manager Form.
 */
function bat_availability_event_manager_form($form, $form_state, $unit, $event_id, $start_date, $end_date) {
  $form = array();
  $new_event_id = $event_id;

  if (isset($form_state['values']['change_event_status'])) {
    $new_event_id = $form_state['values']['change_event_status'];
  }

  $state_options = bat_unit_state_options();

  $form['#attributes']['class'][] = 'bat-management-form bat-event-form';

  // This entire form element will be replaced whenever 'changethis' is updated.
  $form['#prefix'] = '<div id="replace_textfield_div">';
  $form['#suffix'] = '</div>';

  $form['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit->unit_id,
  );

  $form['event_id'] = array(
    '#type' => 'hidden',
    '#value' => $event_id,
  );

  $form['bat_start_date'] = array(
    '#type' => 'hidden',
    '#value' => $start_date,
  );

  $form['bat_end_date'] = array(
    '#type' => 'hidden',
    '#value' => $end_date,
  );

  if ($event_id == -2) {
    $form['event_title'] = array(
      '#prefix' => '<h2>',
      '#markup' => check_plain($unit->name),
      '#suffix' => '</h2>',
    );
  }
  else {
    $form['event_title'] = array(
      '#prefix' => '<h2>',
      '#markup' => t('@unit_name is @status', array('@unit_name' => $unit->name, '@status' => $state_options[$new_event_id])),
      '#suffix' => '</h2>',
    );
  }

  $date_format = variable_get('bat_date_format', 'd-m-Y');
  $form['event_details'] = array(
    '#prefix' => '<div class="event-details">',
    '#markup' => t('Duration: @startdate to @enddate', array('@startdate' => $start_date->format($date_format), '@enddate' => $end_date->format($date_format))),
    '#suffix' => '</div>',
  );

  unset($state_options[$new_event_id]);

  $form['change_event_status'] = array(
    '#title' => t('Change the state for this event to:') . ' ',
    '#type' => 'select',
    '#options' => $state_options,
    '#ajax' => array(
      'callback' => 'bat_availability_ajax_event_status_change',
      'wrapper' => 'replace_textfield_div',
    ),
    '#empty_option' => t('- Select -'),
  );

  if (module_exists('bat_booking') && $new_event_id != 89) {
    $booking_types = bat_booking_get_types();

    foreach ($booking_types as $type) {
      $book_end_date = clone($end_date);

      // If we select one day from the calendar, postpone the departure date.
      if ($start_date == $end_date) {
        $book_end_date = $book_end_date->add(new DateInterval('P1D'));
      }

      $form['order']['order_link'][$type->type] = array(
        '#type' => 'markup',
        '#markup' => '<div>' . l(t('Create @booking_type', array('@booking_type' => $type->label)), 'admin/bat/bookings/add/' . $type->type, array('query' => array('startdate' => $start_date->getTimestamp(), 'enddate' => $book_end_date->getTimestamp(), 'unitid' => $unit->unit_id))) . '</div>',
      );
    }
  }

  return $form;
}

/**
 * The callback for the change_event_status widget of the event manager form.
 */
function bat_availability_ajax_event_status_change($form, $form_state) {
  $start_date = $form_state['values']['bat_start_date'];
  $end_date = $form_state['values']['bat_end_date'];
  $unit_id = $form_state['values']['unit_id'];
  $event_id = $form_state['values']['event_id'];
  $new_event_id = $form_state['values']['change_event_status'];

  // If we have a new event id go ahead and update event.
  if (($event_id != $new_event_id) && $new_event_id != -1) {
    $event = new BookingEvent($unit_id, $new_event_id, $start_date, $end_date);
    $uc = new UnitCalendar($unit_id);
    $responses = $uc->updateCalendar(array($event));

    $state_options = bat_unit_state_options();
    if ($event_id >= -1) {
      $form['form_wrapper_bottom']['#markup'] = t('Updated event from <strong>@old_status</strong> to <strong>@new_status</strong>.', array('@old_status' => $state_options[$event_id], '@new_status' => $state_options[$new_event_id]));
    }
    else {
      $form['form_wrapper_bottom']['#markup'] = t('New Event state is <strong>@state</strong>.', array('@state' => $state_options[$new_event_id]));
    }
  }

  return $form;
}

/**
 * Sets event ids.
 */
function bat_availability_assign_id($id, $status = '1') {
  // Add eleven for now - this allows for 10 states that do not
  // refer to a specific booking.
  $id = $id + 11;

  if ($status == '0') {
    return -($id);
  }
  else {
    return $id;
  }
}

/**
 * Given an event state it returns the valid booking id.
 */
function bat_availability_return_id($id) {
  // Make sure we are not looking for negative ids;
  $id = abs($id);

  $id = $id - 11;

  return $id;
}

/**
 * Implements hook_form__FORM_ID_alter().
 *
 * FORM_ID = bat_booking_settings
 */
function bat_availability_form_bat_booking_settings_alter(&$form, &$form_state, $form_id) {
  $form['label_settings'] = array(
    '#type' => 'fieldset',
    '#group' => 'bat_settings',
    '#title' => t('Calendar Color Codes & Labels'),
  );

  $form['label_settings']['bat_not_available_color'] = array(
    '#type' => 'textfield',
    '#title' => t('"@availability_status" color', array('@availability_status' => t('Unavailable'))),
    '#size' => 10,
    '#maxlength' => 7,
    '#default_value' => variable_get('bat_not_available_color', '#CC2727'),
    '#element_validate' => array('bat_availability_validate_hex_color'),
    '#dependency' => array('edit-row-options-colors-legend' => array('type')),
    '#prefix' => '<div class="bat-colorpicker-wrapper form-wrapper">',
    '#suffix' => '<div class="bat-colorpicker"></div></div>',
    '#attributes' => array('class' => array('bat-edit-colorpicker')),
    '#attached' => array(
      // Add Farbtastic color picker.
      'library' => array(
        array('system', 'farbtastic'),
      ),
      // Add javascript to trigger the colorpicker.
      'js' => array(drupal_get_path('module', 'bat_availability') . '/js/bat_color.js'),
    ),
  );

  $form['label_settings']['bat_not_available_text'] = array(
    '#type' => 'textfield',
    '#title' => t('"@availability_status" label', array('@availability_status' => t('Unavailable'))),
    '#size' => 10,
    '#maxlength' => 50,
    '#default_value' => variable_get('bat_not_available_text', 'N/A'),
  );

  $form['label_settings']['bat_available_color'] = array(
    '#type' => 'textfield',
    '#title' => t('"@availability_status" color', array('@availability_status' => t('Available'))),
    '#size' => 10,
    '#maxlength' => 7,
    '#default_value' => variable_get('bat_available_color', '#8BA175'),
    '#element_validate' => array('bat_availability_validate_hex_color'),
    '#dependency' => array('edit-row-options-colors-legend' => array('type')),
    '#prefix' => '<div class="bat-colorpicker-wrapper">',
    '#suffix' => '<div class="bat-colorpicker"></div></div>',
    '#attributes' => array('class' => array('bat-edit-colorpicker')),
    '#attached' => array(
      // Add Farbtastic color picker.
      'library' => array(
        array('system', 'farbtastic'),
      ),
      // Add javascript to trigger the colorpicker.
      'js' => array(drupal_get_path('module', 'bat_availability') . '/js/bat_color.js'),
    ),
  );

  $form['label_settings']['bat_available_text'] = array(
    '#type' => 'textfield',
    '#title' => t('"@availability_status" label', array('@availability_status' => t('Available'))),
    '#size' => 10,
    '#maxlength' => 50,
    '#default_value' => variable_get('bat_available_text', 'AV'),
  );

  $form['label_settings']['bat_on_request_color'] = array(
    '#type' => 'textfield',
    '#title' => t('"@availability_status" color', array('@availability_status' => t('Available on Request'))),
    '#size' => 10,
    '#maxlength' => 7,
    '#default_value' => variable_get('bat_on_request_color', '#C5C5C5'),
    '#element_validate' => array('bat_availability_validate_hex_color'),
    '#dependency' => array('edit-row-options-colors-legend' => array('type')),
    '#prefix' => '<div class="bat-colorpicker-wrapper">',
    '#suffix' => '<div class="bat-colorpicker"></div></div>',
    '#attributes' => array('class' => array('bat-edit-colorpicker')),
    '#attached' => array(
      // Add Farbtastic color picker.
      'library' => array(
        array('system', 'farbtastic'),
      ),
      // Add javascript to trigger the colorpicker.
      'js' => array(drupal_get_path('module', 'bat_availability') . '/js/bat_color.js'),
    ),
  );

  $form['label_settings']['bat_on_request_text'] = array(
    '#type' => 'textfield',
    '#title' => t('"@availability_status" label', array('@availability_status' => t('Available on Request'))),
    '#size' => 10,
    '#maxlength' => 50,
    '#default_value' => variable_get('bat_on_request_text', 'ON-REQ'),
  );

  $form['label_settings']['bat_anon_booking_color'] = array(
    '#type' => 'textfield',
    '#title' => t('"@availability_status" color', array('@availability_status' => t('Anonymous booking'))),
    '#size' => 10,
    '#maxlength' => 7,
    '#default_value' => variable_get('bat_anon_booking_color', '#8C6A5A'),
    '#element_validate' => array('bat_availability_validate_hex_color'),
    '#dependency' => array('edit-row-options-colors-legend' => array('type')),
    '#prefix' => '<div class="bat-colorpicker-wrapper">',
    '#suffix' => '<div class="bat-colorpicker"></div></div>',
    '#attributes' => array('class' => array('bat-edit-colorpicker')),
    '#attached' => array(
      // Add Farbtastic color picker.
      'library' => array(
        array('system', 'farbtastic'),
      ),
      // Add javascript to trigger the colorpicker.
      'js' => array(drupal_get_path('module', 'bat_availability') . '/js/bat_color.js'),
    ),
  );

  $form['label_settings']['bat_anon_booking_text'] = array(
    '#type' => 'textfield',
    '#title' => t('"@availability_status" label', array('@availability_status' => t('Anonymous booking'))),
    '#size' => 10,
    '#maxlength' => 50,
    '#default_value' => variable_get('bat_anon_booking_text', 'A-B'),
  );

  $form['label_settings']['bat_unconfirmed_booking_color'] = array(
    '#type' => 'textfield',
    '#title' => t('"@availability_status" color', array('@availability_status' => t('Unconfirmed booking'))),
    '#size' => 10,
    '#maxlength' => 7,
    '#default_value' => variable_get('bat_unconfirmed_booking_color', '#6D8C9C'),
    '#element_validate' => array('bat_availability_validate_hex_color'),
    '#dependency' => array('edit-row-options-colors-legend' => array('type')),
    '#prefix' => '<div class="bat-colorpicker-wrapper">',
    '#suffix' => '<div class="bat-colorpicker"></div></div>',
    '#attributes' => array('class' => array('bat-edit-colorpicker')),
    '#attached' => array(
      // Add Farbtastic color picker.
      'library' => array(
        array('system', 'farbtastic'),
      ),
      // Add javascript to trigger the colorpicker.
      'js' => array(drupal_get_path('module', 'bat_availability') . '/js/bat_color.js'),
    ),
  );

  $form['label_settings']['bat_unconfirmed_booking_text'] = array(
    '#type' => 'textfield',
    '#title' => t('"@availability_status" label', array('@availability_status' => t('Unconfirmed booking'))),
    '#size' => 10,
    '#maxlength' => 50,
    '#default_value' => variable_get('bat_unconfirmed_booking_text', 'UNCONF'),
  );

  $form['label_settings']['bat_view_unit_name'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      '1' => t('Display unit name in place of availability state label.'),
    ),
    '#default_value' => variable_get('bat_view_unit_name', array('')),
  );

  $form['label_settings']['bat_calendar_events_view'] = array(
    '#type' => 'radios',
    '#title' => t('Calendar Events Display Mode'),
    '#description' => t('Select how to display events on calendars.'),
    '#default_value' => variable_get('bat_calendar_events_view', '0'),
    '#options' => array (
      '0' => t('Display events as starting at middle of day (check-in day) and ending at middle of check-out day'),
      '1' => t('Display events occupying full day box at start and ending on day of last night (day before check-out date)'),
    )
  );
}

/**
 * Utility function to validate hex color numbers.
 */
function bat_availability_validate_hex_color($element, &$form_state) {
  if (!preg_match('/^#[a-f0-9]{6}$/i', $element['#value'])) {
    form_error($element, t('This is not a valid hexadecimal color!'));
  }
}
