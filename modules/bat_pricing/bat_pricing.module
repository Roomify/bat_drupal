<?php

/**
 * @file
 * Manages pricing for Bookable Units and displaying dates on the jquery
 * FullCalendar plugin.
 */

use Drupal\bat_pricing\PricingEvent;
use Drupal\bat_pricing\UnitPricingCalendar;

define('BAT_PER_NIGHT', 'bat_per_night');
define('BAT_PER_PERSON', 'bat_per_person');

/**
 * Implements hook_permission().
 */
function bat_pricing_permission() {
  $permissions = array(
    'administer bat_unit pricing' => array(
      'title' => t('Administer unit pricing'),
      'description' => t('Allows users to access bulk availability operations for bookable units.'),
      'restrict access' => TRUE,
    ),
    'update pricing own bat_unit entities' => array(
      'title' => t('Edit pricing own bookable units of any type'),
    ),
    'update pricing any bat_unit entity' => array(
      'title' => t('Edit pricing any bookable unit of any type'),
    ),
  );

  // Generate permissions per bat type.
  foreach (bat_unit_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      'update pricing own bat_unit entities of bundle ' . $type_name => array(
        'title' => t('Edit pricing own %type_name bookable units', array('%type_name' => $type->label)),
      ),
      'update pricing any bat_unit entity of bundle ' . $type_name => array(
        'title' => t('Edit pricing any %type_name bookable unit', array('%type_name' => $type->label)),
      ),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function bat_pricing_menu() {
  $items = array();

  $items['admin/bat/units/unit/%bat_unit/pricing'] = array(
    'title' => 'Manage Pricing',
    'page callback' => 'bat_pricing_page',
    'page arguments' => array(4, 6, 7),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('update pricing', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => '30',
  );

  $items['admin/bat/units/unit/%bat_unit/price'] = array(
    'title' => 'Price Management',
    'page callback' => 'bat_availability_price_manager_page',
    'page arguments' => array(4),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('update pricing', 4),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  $items['admin/bat/units/bulk_pricing_management'] = array(
    'title' => 'Bulk pricing management',
    'page callback' => 'bat_pricing_bulk_pricing_management',
    'page arguments' => array(4, 5, 6),
    'access arguments' => array('administer bat_unit pricing'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bat_pricing_form_bat_unit_type_form_alter(&$form, &$form_state) {
  $unit_type = $form_state['bat_unit_type'];

  if (!isset($unit_type->is_new)) {
    $price_fields = array();

    $fields = field_info_instances('bat_unit', $unit_type->type);
    foreach ($fields as $field) {
      $field_info = field_info_field($field['field_name']);

      if ($field_info['type'] == 'commerce_price') {
        $price_fields[$field['field_name']] = $field['field_name'];
      }
    }

    if (isset($form['additional_settings'])) {
      $form['additional_settings'] = array(
        '#type' => 'vertical_tabs',
        '#weight' => 99,
      );
    }

    if (!isset($form['pricing'])) {
      $form['pricing'] = array(
        '#type' => 'fieldset',
        '#group' => 'additional_settings',
        '#title' => t('Pricing'),
        '#tree' => FALSE,
        '#weight' => 80,
      );
    }

    if (empty($price_fields)) {
      $form['pricing']['field'] = array(
        '#markup' => 'You need to add a "Commerce Price" field.',
      );
    }
    else {
      $form['pricing']['pricing_field'] = array(
        '#type' => 'select',
        '#title' => t('Select your default price field'),
        '#options' => $price_fields,
        '#default_value' => isset($unit_type->data['pricing_field']) ? $unit_type->data['pricing_field'] : NULL,
        '#weight' => 1,
      );

      $form['actions']['submit']['#submit'][] = 'bat_pricing_form_bat_unit_type_form_submit';
    }
  }
}

/**
 * Submit callback for bat_unit_type_form form.
 */
function bat_pricing_form_bat_unit_type_form_submit($form, &$form_state) {
  $form_state['bat_unit_type']->data['pricing_field'] = $form_state['values']['pricing_field'];
  $form_state['bat_unit_type']->save();
}

/**
 * Implements hook_query_TAG_alter().
 */
function bat_pricing_query_bat_pricing_access_alter(QueryAlterableInterface $query) {
  // Look for unit base table to pass to the query altering function or else
  // assume we don't have the tables we need to establish order related altering
  // right now.
  foreach ($query->getTables() as $table) {
    if ($table['table'] === 'bat_units') {
      bat_entity_access_query_alter($query, 'bat_unit', $table['alias'], NULL, 'update pricing');
      break;
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function bat_pricing_entity_delete($entity, $type) {
  if ($type == 'bat_unit') {
    // Remove data related to entity from bat_pricing table.
    db_delete('bat_pricing')
      ->condition('unit_id', $entity->unit_id)
      ->execute();
  }
}

/**
 * Callback for admin/bat/units/unit/%pricing_unit/pricing.
 *
 * Builds pricing page by adding calendar and pulling events from pricing table.
 */
function bat_pricing_page(BatUnit $bat_unit, $year = '', $month = '') {
  // Set the page title.
  drupal_set_title(t('Edit @unit_name Pricing', array('@unit_name' => $bat_unit->name)));

  // Add styles.
  bat_availability_modal_style();

  // Get the current page's URL, striped of the year and month args.
  // This allows us to place this page anywhere, including at
  // unit/%/pricing  or  admin/bat/units/unit/%/pricing
  list($url) = explode('/' . $year . '/' . $month, current_path());

  return array(
    '#theme' => 'bat_three_month_calendar',
    '#url' => $url,
    '#form' => drupal_get_form('update_unit_pricing_form', $bat_unit->unit_id),
    '#year' => $year,
    '#month' => $month,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'bat_pricing') . '/js/bat_pricing.js',
        array(
          'data' => array('batPricing' => array('batID' => $bat_unit->unit_id)),
          'type' => 'setting',
        ),
      ),
      'css' => array(
        drupal_get_path('module', 'bat_pricing') . '/css/bat_pricing.css',
      ),
    ),
  );
}

/**
 * The PriceManager page shows when clicking on an event in the pricing
 * calendar - will allow a user to manipulate that event.
 */
function bat_availability_price_manager_page($unit, $event_id = NULL, $start_date = 0, $end_date = 0) {
  // Include modal library.
  ctools_include('modal');

  // If any info missing we cannot load the event.
  if ($event_id == NULL || $start_date == 0 || $end_date == 0) {
    $output[] = ctools_modal_command_dismiss();
    drupal_set_message(t('Unable to load event.'), 'error');
  }

  // Basic check to avoid damage from dirty input.
  $event_id = check_plain($event_id);
  $start_date = check_plain($start_date);
  $end_date = check_plain($end_date);

  // Process start and end date.
  $sd = new DateTime();
  $sd->setTimezone(new DateTimeZone('UTC'))->setTimestamp($start_date);

  $ed = new DateTime();
  $ed->setTimezone(new DateTimeZone('UTC'))->setTimestamp($end_date);

  $form_state = array(
    'title' => t('Price Management'),
    'ajax' => TRUE,
    're_render' => FALSE,
    'no_redirect' => TRUE,
    'build_info' => array(
      'args' => array($unit->unit_id),
    ),
  );

  $form = drupal_build_form('update_unit_pricing_form', $form_state);
  if (!empty($form_state['ajax']) && (!$form_state['executed'] || $form_state['rebuild'])) {
    $form['bat_update_pricing']['bat_date_range']['bat_start_date']['date']['#value'] = $sd->format($form['bat_update_pricing']['bat_date_range']['bat_start_date']['#date_format']);
    $form['bat_update_pricing']['bat_date_range']['bat_end_date']['date']['#value'] = $ed->format($form['bat_update_pricing']['bat_date_range']['bat_end_date']['#date_format']);

    $form['bat_update_pricing']['bat_date_range']['bat_start_date']['#disabled'] = TRUE;
    $form['bat_update_pricing']['bat_date_range']['bat_end_date']['#disabled'] = TRUE;

    $output = ctools_modal_form_render($form_state, $form);
  }
  else {
    $output = array(ctools_modal_command_dismiss());
  }

  print ajax_render($output);
  exit();
}

/**
 * A basic form that allows us to update the state of the calendar.
 */
function update_unit_pricing_form($form, &$form_state, $unit_id) {

  $form['#attributes']['class'][] = 'bat-management-form unit-pricing-form';

  $form['bat_update_pricing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Unit Pricing'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Careful - this will overwrite any existing pricing info.'),
  );

  $form['bat_update_pricing']['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );

  $form['bat_update_pricing']['bat_date_range'] = array(
    '#type' => 'fieldset',
  );

  $form['bat_update_pricing']['bat_date_range'] += bat_date_range_fields();
  $form['bat_update_pricing']['bat_date_range']['bat_start_date']['#title'] = t('Start Date');
  $form['bat_update_pricing']['bat_date_range']['bat_end_date']['#title'] = t('End Date');
  // Unset a js setting that is not relevant for pricing.
  drupal_add_js(array('bat' => array('batBookingStartDay' => 0)), 'setting');

  $day_options = array(
    '1' => t('Sunday'),
    '2' => t('Monday'),
    '3' => t('Tuesday'),
    '4' => t('Wednesday'),
    '5' => t('Thursday'),
    '6' => t('Friday'),
    '7' => t('Saturday'),
  );
  $form['bat_update_pricing']['day_options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Days of the Week applicable'),
    '#options' => $day_options,
    '#default_value' => array_keys($day_options),
  );

  $form['bat_update_pricing']['op'] = array(
    '#type' => 'fieldset',
  );

  $price_options = bat_price_options_options();
  unset($price_options[BAT_ADD_DAILY]);
  unset($price_options[BAT_SUB_DAILY]);
  $form['bat_update_pricing']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#options' => $price_options,
    '#default_value' => 'replace',
  );

  $form['bat_update_pricing']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => t('Amount to apply for rule'),
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['bat_update_pricing']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['bat_update_pricing']['#submit'])) {
    $submit += $form['bat_update_pricing']['#submit'];
  }

  $form['bat_update_pricing']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Unit Pricing'),
    '#submit' => $submit + array('update_unit_pricing_form_submit'),
  );

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'bat_form_start_end_dates_validate';
  $form['#validate'][] = 'update_unit_pricing_form_validate';

  return $form;
}

/**
 * Validate callback form update_unit_pricing_form form.
 *
 * @see update_unit_pricing_form()
 */
function update_unit_pricing_form_validate(&$form, &$form_state) {
  // Make sure amount entered is numeric.
  if (!empty($form_state['values']['amount']) && !is_numeric($form_state['values']['amount'])) {
    form_set_error('amount', t('%name: you must enter a numeric value for the price.', array('%name' => 'Amount')));
  }
}

/**
 * Submit callback form update_unit_pricing_form form.
 *
 * @see update_unit_pricing_form()
 */
function update_unit_pricing_form_submit(&$form, &$form_state) {
  list($start_date, $end_date) = bat_form_input_get_start_end_dates($form_state);
  $operation = $form_state['values']['operation'];
  $amount = $form_state['values']['amount'];
  $unit_id = $form_state['values']['unit_id'];
  $days = array_filter($form_state['values']['day_options']);

  update_calendar_event($unit_id, $amount, $start_date, $end_date, $operation, $days);
}

/**
 * Page callback for Bulk Pricing Management.
 *
 * @param string $year
 *   Year to perform the operations.
 * @param string $month
 *   Month to perform the operations.
 * @param string $type
 *   Bookable unit type to perform the operation.
 *
 * @return array
 *   Bulk pricing management page render array.
 */
function bat_pricing_bulk_pricing_management($year = '', $month = '', $type = 'all') {
  // Load FullCalendar and relevant js/css.
  bat_fullcalendar_loaded();

  // If year is not set then give it the current date.
  $year = ($year == '') ? date('Y', time()) : $year;
  $month = ($month == '') ? date('n', time()) : $month;
  $type = ($type == '') ? 'all' : $type;

  // It's not a valid unit type.
  if (bat_unit_get_types($type) == FALSE) {
    $type = 'all';
  }

  // It's not a valid month or not valid year.
  $year_options = range(date('Y', time()) - 2, date('Y', time()) + 5);
  if ($month < 1 || $month > 12 || !in_array($year, $year_options)) {
    $year = date('Y', time());
    $month = date('n', time());
  }

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'bat_unit');
  $efq->addTag('bat_pricing_access');
  if ($type != 'all') {
    $efq->entityCondition('bundle', $type, '=');
  }
  $efq->pager(20);
  $bat_units = $efq->execute();

  $bat_id = $units = array();
  if ($bat_units) {
    $units = array_values(entity_load('bat_unit', array_keys($bat_units['bat_unit'])));

    $bat_id = array();
    foreach ($units as $value) {
      $bat_id[] = $value->unit_id;
    }
  }

  // Return the full render array.
  return array(
    drupal_get_form('bat_filter_month_form', $month, $year),
    drupal_get_form('bat_pricing_update_form', $month, $year, $type, $units),
    array(
      '#theme' => 'pager',
    ),
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'bat_pricing') . '/css/bat_pricing.css'),
      'js' => array(
        drupal_get_path('module', 'bat_pricing') . '/js/bat_pricing_management.js',
        drupal_get_path('module', 'bat') . '/js/bat_fullcalendar_singlerowmonth.js',
        array(
          'data' => array(
            'batUnitManagement' => array(
              'batNumber' => count($bat_id),
              'currentMonth' => $month,
              'currentYear' => $year,
              'batId' => $bat_id,
            ),
          ),
          'type' => 'setting',
        ),
      ),
    ),
  );
}

/**
 * Form to manage the bat units pricing.
 *
 * @see bat_pricing_bulk_pricing_management()
 */
function bat_pricing_update_form($form, &$form_state, $month, $year, $type, $bat_units) {

  $form['#attributes']['class'][] = 'bat-management-form bat-bulk-pricing-form';

  $form['bat_pricing_update'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Pricing'),
    '#description' => t('Apply a pricing adjustment in bulk to the units selected below for the specified date range.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['bat_pricing_update']['curr_month'] = array(
    '#type' => 'hidden',
    '#value' => $month,
  );

  $form['bat_pricing_update']['curr_year'] = array(
    '#type' => 'hidden',
    '#value' => $year,
  );

  $form['bat_pricing_update']['curr_type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );

  $form['bat_pricing_update']['bat_date_range'] = bat_date_range_fields($year, $month);

  $day_options = array(
    '1' => t('Sun'),
    '2' => t('Mon'),
    '3' => t('Tue'),
    '4' => t('Wed'),
    '5' => t('Thu'),
    '6' => t('Fri'),
    '7' => t('Sat'),
  );
  $form['bat_pricing_update']['day_options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Days of the Week applicable'),
    '#options' => $day_options,
    '#default_value' => array_keys($day_options),
  );

  $form['bat_pricing_update']['op'] = array(
    '#type' => 'fieldset',
  );

  $price_options = bat_price_options_options();
  $form['bat_pricing_update']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#options' => $price_options,
    '#default_value' => 'replace',
  );

  $form['bat_pricing_update']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => t('Amount to apply for rule'),
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['bat_pricing_update']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  $form['bat_pricing_update']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Unit Pricing'),
  );

  $form['#validate'][] = 'bat_pricing_update_form_validate';
  $form['#validate'][] = 'bat_form_start_end_dates_validate';

  $form['bat_data'] = array(
    '#prefix' => '<table class="bat-month-manager">',
    '#type' => 'container',
    '#suffix' => '</tbody></table>',
  );

  if (count($bat_units) > 0) {
    $date = new DateTime();
    $date->setDate($year, $month, '01');
    $form['bat_data']['select-all'] = array(
      '#type' => 'select',
      '#prefix' => '<thead><tr><th class="unit-bulk-select">',
      '#options' => array(
        BAT_THIS_PAGE => t('All (this page)'),
        BAT_ALL_PAGES => t('All (all pages)'),
        BAT_NONE => t('None')),
      '#empty_option' => t('- Select -'),
      '#suffix' => '</th><th class="month-name"><div class="fc-header-title"><h2>' . format_date($date->getTimestamp(), 'custom', 'F Y') . '</h2></div></th></tr></thead><tbody>',
    );
  }

  foreach ($bat_units as $key => $value) {
    $form['bat_data']['bat-' . $value->unit_id] = array(
      '#type' => 'checkbox',
      '#title' => $value->name,
      '#prefix' => '<tr><th class="unit-name">',
      '#suffix' => '</th><td class="unit-days"><div id="calendar' . $key . '"></div></td></tr>',
    );
  }

  return $form;
}

/**
 * Validate callback for bat_pricing_update_form form.
 */
function bat_pricing_update_form_validate(&$form, &$form_state) {
  // Make sure amount entered is numeric.
  if (!empty($form_state['values']['amount']) && !is_numeric($form_state['values']['amount'])) {
    form_set_error('amount', t('%name: you must enter a numeric value for the price.', array('%name' => t('Amount'))));
  }

  // Validate that a unit is selected.
  bat_validate_unit($form_state);
}

/**
 * Submit callback for bat_pricing_update_form form.
 */
function bat_pricing_update_form_submit(&$form, &$form_state) {
  list($start_date, $end_date) = bat_form_input_get_start_end_dates($form_state);
  $type = $form_state['values']['curr_type'];
  $operation = $form_state['values']['operation'];
  $amount = $form_state['values']['amount'];
  $days = array_filter($form_state['values']['day_options']);

  if ($form_state['values']['select-all'] == BAT_ALL_PAGES) {
    $query = db_select('bat_units', 'n')->fields('n', array('unit_id', 'name'));
    if ($type != 'all') {
      $query->condition('type', $type, '=');
    }
    $bat_units = $query->execute()->fetchAll();

    foreach ($bat_units as $bat) {
      $unit_id = $bat->unit_id;

      update_calendar_event($unit_id, $amount, $start_date, $end_date, $operation, $days);
    }
  }
  else {
    foreach ($form_state['values'] as $key => $value) {
      if (strpos($key, 'bat-') === 0 && $value == '1') {
        $unit_id = str_replace('bat-', '', $key);

        update_calendar_event($unit_id, $amount, $start_date, $end_date, $operation, $days);
      }
    }
  }

}

/**
 * Get all pricing events for a specific date range.
 */
function update_calendar_event($unit_id, $amount, $start_date, $end_date, $operation, $days) {
  if (!empty($days)) {
    $rc = new UnitPricingCalendar($unit_id);
    $events = $rc->calculatePricingEvents($unit_id, $amount, $start_date, $end_date, $operation, $days);

    $rc->updateCalendar($events);
  }
  else {
    $rc = new UnitPricingCalendar($unit_id);
    $pe = new PricingEvent($unit_id, $amount, $start_date, $end_date, $operation);
    $events = array($pe);

    $rc->updateCalendar($events);
  }
}
