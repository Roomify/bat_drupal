<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function bat_periodic_pricing_menu() {
  $items = array();

  $items['admin/bat/units/unit/%bat_unit/pricing/daily'] = array(
    'title' => 'Daily Pricing',
    'page callback' => 'bat_pricing_page',
    'page arguments' => array(4, 7, 8),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('update pricing', 4),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '30',
  );

  $items['admin/bat/units/unit/%bat_unit/pricing/weekly'] = array(
    'title' => 'Weekly Pricing',
    'page callback' => 'bat_periodic_pricing_weekly_page',
    'page arguments' => array(4, 7, 8),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('update pricing', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => '31',
  );

  $items['admin/bat/units/unit/%bat_unit/pricing/monthly'] = array(
    'title' => 'Monthly Pricing',
    'page callback' => 'bat_periodic_pricing_monthly_page',
    'page arguments' => array(4, 7, 8),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('update pricing', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => '32',
  );

  $items['admin/bat/units/bulk_pricing_management/daily'] = array(
    'title' => 'Daily Pricing',
    'page callback' => 'bat_pricing_bulk_pricing_management',
    'page arguments' => array(5, 6, 7),
    'access arguments' => array('administer bat_unit pricing'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '30',
  );

  $items['admin/bat/units/bulk_pricing_management/weekly'] = array(
    'title' => 'Weekly Pricing',
    'page callback' => 'bat_periodic_pricing_weekly_bulk_pricing_management',
    'page arguments' => array(5, 6, 7),
    'access arguments' => array('administer bat_unit pricing'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '31',
  );

  $items['admin/bat/units/bulk_pricing_management/monthly'] = array(
    'title' => 'Monthly Pricing',
    'page callback' => 'bat_periodic_pricing_monthly_bulk_pricing_management',
    'page arguments' => array(5, 6),
    'access arguments' => array('administer bat_unit pricing'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '32',
  );

  $items['bat/units/unit/%bat_unit/weekly-pricing/json/%'] = array(
    'title' => 'Pricing Event',
    'page callback' => 'bat_periodic_pricing_weekly_pricing_event',
    'page arguments' => array(3, 6, 7),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('view', 3),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  $items['bat/units/unit/%bat_unit/monthly-pricing/json/%'] = array(
    'title' => 'Pricing Event',
    'page callback' => 'bat_periodic_pricing_monthly_pricing_event',
    'page arguments' => array(3, 6, 7),
    'access callback' => 'bat_unit_access',
    'access arguments' => array('view', 3),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function bat_periodic_pricing_theme() {
  return array(
    'bat_one_month_calendar' => array(
      'template' => 'bat_one_month_calendar',
      'variables' => array(
        'url' => NULL,
        'form' => NULL,
        'year' => NULL,
        'month' => NULL,
        'link_options' => NULL,
      ),
    ),
  );
}

/**
 * Default implementation of hook_preprocess_bat_one_month_calendar().
 */
function bat_periodic_pricing_preprocess_bat_one_month_calendar(&$vars) {

  // Load FullCalendar Scheduler.
  bat_fullcalendar_scheduler_loaded();

  // Add css styles for three-month-calendar.
  drupal_add_css(drupal_get_path('module', 'bat_periodic_pricing') . '/css/bat_one_month_calendar.css');
  drupal_add_css(drupal_get_path('module', 'bat_availability') . '/css/fullcalendar.theme.css');

  // If dates are not provided then use the current date.
  $year = (empty($vars['year'])) ? date('Y', time()) : check_plain($vars['year']);
  $month = (empty($vars['month'])) ? date('n', time()) : check_plain($vars['month']);

  // Inject settings in javascript that will be used to setup the three months
  // display.
  drupal_add_js(array('batCalendar' => array('currentMonth' => intval($month))), 'setting');
  drupal_add_js(array('batCalendar' => array('currentYear' => intval($year))), 'setting');
  drupal_add_js(array('batCalendar' => array('firstDay' => intval(variable_get('date_first_day', 0)))), 'setting');
}

/**
 * Builds pricing page by adding calendar and pulling events from weekly pricing table.
 */
function bat_periodic_pricing_weekly_page(BatUnit $bat_unit, $year = '', $month = '') {

  // Set the page title.
  drupal_set_title(t('Edit @unit_name Pricing', array('@unit_name' => $bat_unit->name)));

  // Get the current page's URL, striped of the year and month args.
  // This allows us to place this page anywhere, including at
  // unit/%/pricing  or  admin/bat/units/unit/%/pricing
  list($url) = explode('/' . $year . '/' . $month, current_path());

  return array(
    '#theme' => 'bat_one_month_calendar',
    '#url' => $url,
    '#form' => drupal_get_form('bat_periodic_pricing_update_unit_pricing_weekly_form', $bat_unit->unit_id),
    '#year' => $year,
    '#month' => $month,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'bat_periodic_pricing') . '/js/bat_weekly_pricing.js',
        array(
          'data' => array('batPricing' => array('batID' => $bat_unit->unit_id)),
          'type' => 'setting',
        ),
      ),
      'css' => array(
        drupal_get_path('module', 'bat_pricing') . '/css/bat_pricing.css',
      ),
    ),
  );
}

/**
 * Builds pricing page by adding calendar and pulling events from monthly pricing table.
 */
function bat_periodic_pricing_monthly_page(BatUnit $bat_unit, $year = '', $month = '') {
  // Set the page title.
  drupal_set_title(t('Edit @unit_name Pricing', array('@unit_name' => $bat_unit->name)));

  // Get the current page's URL, striped of the year and month args.
  // This allows us to place this page anywhere, including at
  // unit/%/pricing  or  admin/bat/units/unit/%/pricing
  list($url) = explode('/' . $year . '/' . $month, current_path());

  return array(
    '#theme' => 'bat_one_month_calendar',
    '#url' => $url,
    '#form' => drupal_get_form('bat_periodic_pricing_update_unit_pricing_monthly_form', $bat_unit->unit_id),
    '#year' => $year,
    '#month' => $month,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'bat_periodic_pricing') . '/js/bat_monthly_pricing.js',
        array(
          'data' => array('batPricing' => array('batID' => $bat_unit->unit_id)),
          'type' => 'setting',
        ),
      ),
      'css' => array(
        drupal_get_path('module', 'bat_pricing') . '/css/bat_pricing.css',
      ),
    ),
  );
}

/**
 * Page callback for Bulk Pricing Management - Weekly.
 *
 * @param string $year
 *   Year to perform the operations.
 * @param string $month
 *   Month to perform the operations.
 * @param string $type
 *   Bookable unit type to perform the operation.
 *
 * @return array
 *   Bulk pricing management page render array.
 */
function bat_periodic_pricing_weekly_bulk_pricing_management($year = '', $month = '', $type = 'all') {
  // Load FullCalendar scheduler and relevant js/css.
  bat_fullcalendar_scheduler_loaded();

  // If year is not set then give it the current date.
  $year = ($year == '') ? date('Y', time()) : $year;
  $month = ($month == '') ? date('n', time()) : $month;
  $type = ($type == '') ? 'all' : $type;

  // It's not a valid unit type.
  if (bat_unit_get_types($type) == FALSE) {
    $type = 'all';
  }

  // It's not a valid month or not valid year.
  $year_options = range(date('Y', time()) - 2, date('Y', time()) + 5);
  if ($month < 1 || $month > 12 || !in_array($year, $year_options)) {
    $year = date('Y', time());
    $month = date('n', time());
  }

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'bat_unit');
  $efq->addTag('bat_pricing_access');
  if ($type != 'all') {
    $efq->entityCondition('bundle', $type, '=');
  }
  $efq->pager(20);
  $bat_units = $efq->execute();

  $bat_id = $units = array();
  if ($bat_units) {
    $units = array_values(entity_load('bat_unit', array_keys($bat_units['bat_unit'])));

    $bat_id = array();
    foreach ($units as $value) {
      $bat_id[] = $value->unit_id;
    }
  }

  // Return the full render array.
  return array(
    drupal_get_form('bat_filter_month_form', $month, $year),
    drupal_get_form('bat_periodic_pricing_weekly_update_form', $month, $year, $type, $units),
    array(
      '#theme' => 'pager',
    ),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'bat_pricing') . '/css/bat_pricing.css',
        drupal_get_path('module', 'bat_periodic_pricing') . '/css/bat_periodic_pricing.css',
      ),
      'js' => array(
        drupal_get_path('module', 'bat_periodic_pricing') . '/js/bat_weekly_pricing_management.js',
        drupal_get_path('module', 'bat') . '/js/bat_fullcalendar_singlerowmonth.js',
        array(
          'data' => array(
            'batUnitManagement' => array(
              'batNumber' => count($bat_id),
              'currentMonth' => $month,
              'currentYear' => $year,
              'batId' => $bat_id,
            ),
          ),
          'type' => 'setting',
        ),
      ),
    ),
  );
}

/**
 * Page callback for Bulk Pricing Management - Monthly.
 *
 * @param string $year
 *   Year to perform the operations.
 * @param string $month
 *   Month to perform the operations.
 * @param string $type
 *   Bookable unit type to perform the operation.
 *
 * @return array
 *   Bulk pricing management page render array.
 */
function bat_periodic_pricing_monthly_bulk_pricing_management($year = '', $type = 'all') {
  // Load FullCalendar scheduler and relevant js/css.
  bat_fullcalendar_scheduler_loaded();

  // If year is not set then give it the current date.
  $year = ($year == '') ? date('Y', time()) : $year;
  $type = ($type == '') ? 'all' : $type;

  // It's not a valid unit type.
  if (bat_unit_get_types($type) == FALSE) {
    $type = 'all';
  }

  // It's not a valid month or not valid year.
  $year_options = range(date('Y', time()) - 2, date('Y', time()) + 5);
  if (!in_array($year, $year_options)) {
    $year = date('Y', time());
  }

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'bat_unit');
  $efq->addTag('bat_pricing_access');
  if ($type != 'all') {
    $efq->entityCondition('bundle', $type, '=');
  }
  $efq->pager(20);
  $bat_units = $efq->execute();

  $bat_id = $units = array();
  if ($bat_units) {
    $units = array_values(entity_load('bat_unit', array_keys($bat_units['bat_unit'])));

    $bat_id = array();
    foreach ($units as $value) {
      $bat_id[] = $value->unit_id;
    }
  }

  // Return the full render array.
  return array(
    drupal_get_form('bat_periodic_pricing_filter_year_form', $year),
    drupal_get_form('bat_periodic_pricing_monthly_update_form', $year, $type, $units),
    array(
      '#theme' => 'pager',
    ),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'bat_pricing') . '/css/bat_pricing.css',
        drupal_get_path('module', 'bat_periodic_pricing') . '/css/bat_periodic_pricing.css',
      ),
      'js' => array(
        drupal_get_path('module', 'bat_periodic_pricing') . '/js/bat_monthly_pricing_management.js',
        drupal_get_path('module', 'bat') . '/js/bat_fullcalendar_singlerowmonth.js',
        array(
          'data' => array(
            'batUnitManagement' => array(
              'batNumber' => count($bat_id),
              'currentMonth' => '01',
              'currentYear' => $year,
              'batId' => $bat_id,
            ),
          ),
          'type' => 'setting',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bat_periodic_pricing_form_bat_unit_type_form_alter(&$form, &$form_state) {
  $unit_type = $form_state['bat_unit_type'];

  if (!isset($unit_type->is_new)) {
    $price_fields = array();

    $fields = field_info_instances('bat_unit', $unit_type->type);
    foreach ($fields as $field) {
      $field_info = field_info_field($field['field_name']);

      if ($field_info['type'] == 'commerce_price') {
        $price_fields[$field['field_name']] = $field['field_name'];
      }
    }

    if (isset($form['additional_settings'])) {
      $form['additional_settings'] = array(
        '#type' => 'vertical_tabs',
        '#weight' => 99,
      );
    }

    if (!isset($form['pricing'])) {
      $form['pricing'] = array(
        '#type' => 'fieldset',
        '#group' => 'additional_settings',
        '#title' => t('Pricing'),
        '#tree' => FALSE,
        '#weight' => 80,
      );
    }

    if (!empty($price_fields)) {
      $form['pricing']['pricing_weekly_field'] = array(
        '#type' => 'select',
        '#title' => t('Select your default Weekly price field'),
        '#options' => $price_fields,
        '#default_value' => isset($unit_type->data['pricing_weekly_field']) ? $unit_type->data['pricing_weekly_field'] : NULL,
        '#weight' => 2,
      );

      $form['pricing']['pricing_monthly_field'] = array(
        '#type' => 'select',
        '#title' => t('Select your default Monthly price field'),
        '#options' => $price_fields,
        '#default_value' => isset($unit_type->data['pricing_monthly_field']) ? $unit_type->data['pricing_monthly_field'] : NULL,
        '#weight' => 3,
      );

      $form['actions']['submit']['#submit'][] = 'bat_periodic_pricing_form_bat_unit_type_form_submit';
    }
  }
}

/**
 * Submit callback for bat_periodic_pricing_form_bat_unit_type_form form.
 */
function bat_periodic_pricing_form_bat_unit_type_form_submit($form, &$form_state) {
  $form_state['bat_unit_type']->data['pricing_weekly_field'] = $form_state['values']['pricing_weekly_field'];
  $form_state['bat_unit_type']->data['pricing_monthly_field'] = $form_state['values']['pricing_monthly_field'];
  $form_state['bat_unit_type']->save();
}

/**
 * Implements hook_bat_string_alter().
 */
function bat_periodic_pricing_bat_string_alter(&$string_suggestions, $context) {
}

/**
 * Implements hook_bat_price_modifier_alter().
 */
function bat_periodic_pricing_bat_price_modifier_alter(&$price_modifiers, $booking_info) {

}

/**
 * Calculate number of days, weeks and months in a given period.
 *
 * @param DateTime $start_date
 * The starting date
 *
 * @param DateTime $end_date
 * The end date of our range
 *
 * @return array
 */
function bat_periodic_pricing_calculate_weeks_months_days($start_date, $end_date) {
  $days = $end_date->diff($start_date)->days;

  $weeks = floor($days / 7);
  $months = floor($weeks / 4);

  $more_weeks = $weeks % 4;
  $more_days = $days % 7;

  return array(
    'total_days' => $days,
    'total_weeks' => $weeks,
    'more_days' => $more_days,
    'more_weeks' => $more_weeks,
    'months' => $months,
  );
}

/**
 * Return number of weeks in a given year.
 */
function bat_periodic_pricing_get_iso_weeks_in_year($year) {
  $date = new DateTime;
  $date->setISODate($year, 53);

  return ($date->format('W') === '53' ? 53 : 52);
}

function bat_periodic_pricing_filter_year_form($form, &$form_state, $year, $unit_types = NULL) {

  $form['#attributes']['class'][] = 'bat-management-form bat-filter-month-form';

  $year_options = range(date('Y', time()) - 2, date('Y', time()) + 5);

  $form['bat_availability_filter_month']['year'] = array(
    '#title' => t('Year'),
    '#type' => 'select',
    '#options' => $year_options,
    '#default_value' => $year - date('Y', time()) + 2,
  );

  $type_options['all'] = t('All types');
  $unit_types = isset($unit_types) ? $unit_types : bat_unit_get_types();
  foreach ($unit_types as $unit_type_name => $unit_type) {
    $type_options[$unit_type_name] = $unit_type->label;
  }

  $form['bat_availability_filter_month']['type'] = array(
    '#title' => t('Type'),
    '#type' => 'select',
    '#options' => $type_options,
    '#default_value' => (arg(6) == '') ? 'all' : arg(6),
  );

  $form['bat_availability_filter_month']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  $form['bat_availability_filter_month']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );

  hide($form['bat_availability_filter_month']['actions']['submit']);

  return $form;
}

/**
 * Submit callback for bat_periodic_pricing_filter_year_form form.
 */
function bat_periodic_pricing_filter_year_form_submit(&$form, &$form_state) {
  $year = $form_state['values']['year'] + date('Y', time()) - 2;
  $type = $form_state['values']['type'];

  $address = 'admin/bat/units/' . arg(3) . '/' . arg(4) . '/' . $year;
  if ($type != 'all') {
    $address .= '/' . $type;
  }

  if (arg(7) != '') {
    $address .= ($type == 'all') ? '/all/' . arg(7) : $type . arg(7);
  }

  $form_state['redirect'] = $address;
}

function bat_periodic_pricing_monthly_update_form($form, &$form_state, $year, $type, $bat_units) {

  $form['#attributes']['class'][] = 'bat-management-form bat-bulk-pricing-form';

  $form['bat_pricing_update'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Pricing'),
    '#description' => t('Apply a pricing adjustment in bulk to the units selected below for the specified range.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="bat_pricing_update">',
    '#suffix' => '</div>',
  );

  $form['bat_pricing_update']['curr_year'] = array(
    '#type' => 'hidden',
    '#value' => $year,
  );

  $form['bat_pricing_update']['curr_type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );

  $year_options = range(date('Y'), date('Y') + 5);
  $form['bat_pricing_update']['year'] = array(
    '#type' => 'select',
    '#title' => t('Year'),
    '#options' => array_combine($year_options, $year_options),
    '#default_value' => date('Y'),
  );

  $month_options = array(
    '1' => t('January'),
    '2' => t('February'),
    '3' => t('March'),
    '4' => t('April'),
    '5' => t('May'),
    '6' => t('June'),
    '7' => t('July'),
    '8' => t('August'),
    '9' => t('September'),
    '10' => t('October'),
    '11' => t('November'),
    '12' => t('December'),
  );
  $form['bat_pricing_update']['start_month'] = array(
    '#type' => 'select',
    '#title' => t('Start Month'),
    '#options' => $month_options,
    '#default_value' => date('m'),
    '#ajax' => array(
      'callback' => 'bat_periodic_pricing_monthly_update_form_ajax',
      'wrapper' => 'bat_pricing_update',
    ),
  );

  if (isset($form_state['values']['start_month'])) {
    $start_month = $form_state['values']['start_month'];
  }
  else {
    $start_month = date('m');
  }
  $form['bat_pricing_update']['end_month'] = array(
    '#type' => 'select',
    '#title' => t('End Month'),
    '#options' => array_slice($month_options, $start_month - 1, 12, TRUE),
    '#default_value' => (isset($form_state['values']['end_month'])) ? $form_state['values']['end_month'] : date('m'),
  );

  $form['bat_pricing_update']['op'] = array(
    '#type' => 'fieldset',
  );

  $price_options = bat_price_options_options();
  $form['bat_pricing_update']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#options' => $price_options,
    '#default_value' => 'replace',
  );

  $form['bat_pricing_update']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => t('Amount to apply for rule'),
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['bat_pricing_update']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  $form['bat_pricing_update']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Unit Pricing'),
  );

  $form['#validate'][] = 'bat_pricing_update_form_validate';

  $form['bat_data'] = array(
    '#prefix' => '<table class="bat-month-manager">',
    '#type' => 'container',
    '#suffix' => '</tbody></table>',
  );

  if (count($bat_units) > 0) {
    $date = new DateTime();
    $date->setDate($year, '01', '01');
    $form['bat_data']['select-all'] = array(
      '#type' => 'select',
      '#prefix' => '<thead><tr><th class="unit-bulk-select">',
      '#options' => array(
        BAT_THIS_PAGE => t('All (this page)'),
        BAT_ALL_PAGES => t('All (all pages)'),
        BAT_NONE => t('None')),
      '#empty_option' => t('- Select -'),
      '#suffix' => '</th><th class="month-name"><div class="fc-header-title"><h2>' . format_date($date->getTimestamp(), 'custom', 'Y') . '</h2></div></th></tr></thead><tbody>',
    );
  }

  foreach ($bat_units as $key => $value) {
    $form['bat_data']['bat-' . $value->unit_id] = array(
      '#type' => 'checkbox',
      '#title' => $value->name,
      '#prefix' => '<tr><th class="unit-name">',
      '#suffix' => '</th><td class="unit-days"><div id="calendar' . $key . '"></div></td></tr>',
    );
  }

  return $form;
}

/**
 * Ajax callback for bat_periodic_pricing_monthly_update_form form.
 */
function bat_periodic_pricing_monthly_update_form_ajax($form, &$form_state) {
  return $form['bat_pricing_update'];
}

/**
 * Submit callback for bat_periodic_pricing_monthly_update_form form.
 */
function bat_periodic_pricing_monthly_update_form_submit($form, &$form_state) {
  $type = $form_state['values']['curr_type'];
  $operation = $form_state['values']['operation'];
  $amount = $form_state['values']['amount'];

  $year = $form_state['values']['year'];
  $start_month = $form_state['values']['start_month'];
  $end_month = $form_state['values']['end_month'];

  $start_date = new DateTime($year . '-' . $start_month . '-01');
  $end_date = clone($start_date);
  $end_date->modify('+' . ($end_month - $start_month + 1) . ' months - 1 day');

  if ($form_state['values']['select-all'] == BAT_ALL_PAGES) {
    $query = db_select('bat_units', 'n')->fields('n', array('unit_id', 'name'));
    if ($type != 'all') {
      $query->condition('type', $type, '=');
    }
    $bat_units = $query->execute()->fetchAll();

    foreach ($bat_units as $bat) {
      $unit_id = $bat->unit_id;

      $rc = new UnitMonthlyPricingCalendar($unit_id);
      $events = $rc->calculatePricingEvents($unit_id, $amount, $start_date, $end_date, $operation, array());

      $rc->updateCalendar($events);
    }
  }
  else {
    foreach ($form_state['values'] as $key => $value) {
      if (strpos($key, 'bat-') === 0 && $value == '1') {
        $unit_id = str_replace('bat-', '', $key);

        $rc = new UnitMonthlyPricingCalendar($unit_id);
        $events = $rc->calculatePricingEvents($unit_id, $amount, $start_date, $end_date, $operation, array());

        $rc->updateCalendar($events);
      }
    }
  }
}

function bat_periodic_pricing_weekly_update_form($form, &$form_state, $month, $year, $type, $bat_units) {
  date_popup_add();

  $form['#attributes']['class'][] = 'bat-management-form bat-bulk-pricing-form';

  $form['bat_pricing_update'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Pricing'),
    '#description' => t('Apply a pricing adjustment in bulk to the units selected below for the specified range.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['bat_pricing_update']['curr_month'] = array(
    '#type' => 'hidden',
    '#value' => $month,
  );

  $form['bat_pricing_update']['curr_year'] = array(
    '#type' => 'hidden',
    '#value' => $year,
  );

  $form['bat_pricing_update']['curr_type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );

  $form['bat_pricing_update']['bat_date_range'] = array(
    '#type' => 'fieldset',
  );

  $form['bat_pricing_update']['bat_date_range']['start_week'] = array(
    '#type' => 'textfield',
    '#title' => t('Start week'),
    '#size' => 20,
    '#required' => TRUE,
  );
  $form['bat_pricing_update']['bat_date_range']['end_week'] = array(
    '#type' => 'textfield',
    '#title' => t('End week'),
    '#size' => 20,
    '#required' => TRUE,
  );

  $form['bat_pricing_update']['op'] = array(
    '#type' => 'fieldset',
  );

  $price_options = bat_price_options_options();
  $form['bat_pricing_update']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#options' => $price_options,
    '#default_value' => 'replace',
  );

  $form['bat_pricing_update']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => t('Amount to apply for rule'),
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['bat_pricing_update']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  $form['bat_pricing_update']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Unit Pricing'),
  );

  $form['#validate'][] = 'bat_pricing_update_form_validate';

  $form['bat_data'] = array(
    '#prefix' => '<table class="bat-month-manager">',
    '#type' => 'container',
    '#suffix' => '</tbody></table>',
  );

  if (count($bat_units) > 0) {
    $date = new DateTime();
    $date->setDate($year, $month, '01');
    $form['bat_data']['select-all'] = array(
      '#type' => 'select',
      '#prefix' => '<thead><tr><th class="unit-bulk-select">',
      '#options' => array(
        BAT_THIS_PAGE => t('All (this page)'),
        BAT_ALL_PAGES => t('All (all pages)'),
        BAT_NONE => t('None')),
      '#empty_option' => t('- Select -'),
      '#suffix' => '</th><th class="month-name"><div class="fc-header-title"><h2>' . format_date($date->getTimestamp(), 'custom', 'F Y') . '</h2></div></th></tr></thead><tbody>',
    );
  }

  foreach ($bat_units as $key => $value) {
    $form['bat_data']['bat-' . $value->unit_id] = array(
      '#type' => 'checkbox',
      '#title' => $value->name,
      '#prefix' => '<tr><th class="unit-name">',
      '#suffix' => '</th><td class="unit-days"><div id="calendar' . $key . '"></div></td></tr>',
    );
  }

  return $form;
}

/**
 * Submit callback for bat_periodic_pricing_weekly_update_form form.
 */
function bat_periodic_pricing_weekly_update_form_submit($form, &$form_state) {
  $type = $form_state['values']['curr_type'];
  $operation = $form_state['values']['operation'];
  $amount = $form_state['values']['amount'];

  $start_year = substr($form_state['values']['start_week'], 5, 4);
  $start_week = substr($form_state['values']['start_week'], 17);

  $end_year = substr($form_state['values']['end_week'], 5, 4);
  $end_week = substr($form_state['values']['end_week'], 17);

  $start_date = new DateTime();
  $start_date->setISODate($start_year, $start_week);

  $end_date = new DateTime();
  $end_date->setISODate($end_year, $end_week);

  if ($form_state['values']['select-all'] == BAT_ALL_PAGES) {
    $query = db_select('bat_units', 'n')->fields('n', array('unit_id', 'name'));
    if ($type != 'all') {
      $query->condition('type', $type, '=');
    }
    $bat_units = $query->execute()->fetchAll();

    foreach ($bat_units as $bat) {
      $unit_id = $bat->unit_id;

      $rc = new UnitWeeklyPricingCalendar($unit_id);
      $events = $rc->calculatePricingEvents($unit_id, $amount, $start_date, $end_date, $operation, array());

      $rc->updateCalendar($events);
    }
  }
  else {
    foreach ($form_state['values'] as $key => $value) {
      if (strpos($key, 'bat-') === 0 && $value == '1') {
        $unit_id = str_replace('bat-', '', $key);

        $rc = new UnitWeeklyPricingCalendar($unit_id);
        $events = $rc->calculatePricingEvents($unit_id, $amount, $start_date, $end_date, $operation, array());

        $rc->updateCalendar($events);
      }
    }
  }
}

function bat_periodic_pricing_weekly_pricing_event($unit, $start_year, $end_year) {
  $json_events = array();

  $event_style = BAT_AVAILABILITY_ADMIN_STYLE;
  $event_style = bat_availability_get_style($event_style, $unit);

  $start_date_object = new DateTime($start_year . '-01-01');
  $end_date_object = new DateTime($end_year . '-12-31');

  $rc = new UnitWeeklyPricingCalendar($unit->unit_id, $unit->default_state);
  $events = $rc->getEvents($start_date_object, $end_date_object);

  foreach ($events as $event) {
    $json_events[] = $event->formatJson($event_style, $unit->name);
  }

  echo drupal_json_encode($json_events);
}

function bat_periodic_pricing_monthly_pricing_event($unit, $start_year, $end_year) {
  $json_events = array();

  $event_style = BAT_AVAILABILITY_ADMIN_STYLE;
  $event_style = bat_availability_get_style($event_style, $unit);

  $start_date_object = new DateTime($start_year . '-01-01');
  $end_date_object = new DateTime($end_year . '-12-31');

  $rc = new UnitMonthlyPricingCalendar($unit->unit_id, $unit->default_state);
  $events = $rc->getEvents($start_date_object, $end_date_object);

  foreach ($events as $event) {
    $json_events[] = $event->formatJson($event_style, $unit->name);
  }

  echo drupal_json_encode($json_events);
}

/**
 * A basic form that allows us to update the state of the calendar.
 */
function bat_periodic_pricing_update_unit_pricing_weekly_form($form, &$form_state, $unit_id) {
  date_popup_add();

  $form['#attributes']['class'][] = 'bat-management-form unit-pricing-form';

  $form['bat_update_pricing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Unit Pricing'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Careful - this will overwrite any existing pricing info.'),
  );

  $form['bat_update_pricing']['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );

  $form['bat_update_pricing']['bat_date_range'] = array(
    '#type' => 'fieldset',
  );

  $form['bat_update_pricing']['bat_date_range']['start_week'] = array(
    '#type' => 'textfield',
    '#title' => t('Start week'),
    '#size' => 20,
    '#required' => TRUE,
  );
  $form['bat_update_pricing']['bat_date_range']['end_week'] = array(
    '#type' => 'textfield',
    '#title' => t('End week'),
    '#size' => 20,
    '#required' => TRUE,
  );

  $form['bat_update_pricing']['op'] = array(
    '#type' => 'fieldset',
  );

  $price_options = bat_price_options_options();
  unset($price_options[BAT_ADD_DAILY]);
  unset($price_options[BAT_SUB_DAILY]);
  $form['bat_update_pricing']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#options' => $price_options,
    '#default_value' => 'replace',
  );

  $form['bat_update_pricing']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => t('Amount to apply for rule'),
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['bat_update_pricing']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['bat_update_pricing']['#submit'])) {
    $submit += $form['bat_update_pricing']['#submit'];
  }

  $form['bat_update_pricing']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Unit Pricing'),
    '#submit' => $submit + array('bat_periodic_pricing_update_unit_pricing_weekly_form_submit'),
  );

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'update_unit_pricing_form_validate';

  return $form;
}

/**
 * Submit callback for bat_periodic_pricing_update_unit_pricing_weekly_form form.
 */
function bat_periodic_pricing_update_unit_pricing_weekly_form_submit($form, &$form_state) {
  $unit_id = $form_state['values']['unit_id'];
  $amount = $form_state['values']['amount'];
  $operation = $form_state['values']['operation'];

  $start_year = substr($form_state['values']['start_week'], 5, 4);
  $start_week = substr($form_state['values']['start_week'], 17);

  $end_year = substr($form_state['values']['end_week'], 5, 4);
  $end_week = substr($form_state['values']['end_week'], 17);

  $start_date = new DateTime();
  $start_date->setISODate($start_year, $start_week);

  $end_date = new DateTime();
  $end_date->setISODate($end_year, $end_week);

  $rc = new UnitWeeklyPricingCalendar($unit_id);
  $events = $rc->calculatePricingEvents($unit_id, $amount, $start_date, $end_date, $operation, array());

  $rc->updateCalendar($events);
}

/**
 * A basic form that allows us to update the state of the calendar.
 */
function bat_periodic_pricing_update_unit_pricing_monthly_form($form, &$form_state, $unit_id) {

  $form['#attributes']['class'][] = 'bat-management-form unit-pricing-form';

  $form['bat_update_pricing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Unit Pricing'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Careful - this will overwrite any existing pricing info.'),
    '#prefix' => '<div id="bat_update_pricing">',
    '#suffix' => '</div>',
  );

  $form['bat_update_pricing']['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );

  $year_options = range(date('Y'), date('Y') + 5);
  $form['bat_update_pricing']['year'] = array(
    '#type' => 'select',
    '#title' => t('Year'),
    '#options' => array_combine($year_options, $year_options),
    '#default_value' => date('Y'),
  );

  $month_options = array(
    '1' => t('January'),
    '2' => t('February'),
    '3' => t('March'),
    '4' => t('April'),
    '5' => t('May'),
    '6' => t('June'),
    '7' => t('July'),
    '8' => t('August'),
    '9' => t('September'),
    '10' => t('October'),
    '11' => t('November'),
    '12' => t('December'),
  );
  $form['bat_update_pricing']['start_month'] = array(
    '#type' => 'select',
    '#title' => t('Start Month'),
    '#options' => $month_options,
    '#default_value' => date('m'),
    '#ajax' => array(
      'callback' => 'bat_periodic_pricing_update_unit_pricing_monthly_form_ajax',
      'wrapper' => 'bat_update_pricing',
    ),
  );

  if (isset($form_state['values']['start_month'])) {
    $start_month = $form_state['values']['start_month'];
  }
  else {
    $start_month = date('m');
  }
  $form['bat_update_pricing']['end_month'] = array(
    '#type' => 'select',
    '#title' => t('End Month'),
    '#options' => array_slice($month_options, $start_month - 1, 12, TRUE),
    '#default_value' => (isset($form_state['values']['end_month'])) ? $form_state['values']['end_month'] : date('m'),
  );

  $form['bat_update_pricing']['op'] = array(
    '#type' => 'fieldset',
  );

  $price_options = bat_price_options_options();
  unset($price_options[BAT_ADD_DAILY]);
  unset($price_options[BAT_SUB_DAILY]);
  $form['bat_update_pricing']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#options' => $price_options,
    '#default_value' => 'replace',
  );

  $form['bat_update_pricing']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => t('Amount to apply for rule'),
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['bat_update_pricing']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['bat_update_pricing']['#submit'])) {
    $submit += $form['bat_update_pricing']['#submit'];
  }

  $form['bat_update_pricing']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Unit Pricing'),
    '#submit' => $submit + array('bat_periodic_pricing_update_unit_pricing_monthly_form_submit'),
  );

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'update_unit_pricing_form_validate';

  return $form;
}

/**
 * Ajax callback for bat_periodic_pricing_update_unit_pricing_monthly_form form.
 */
function bat_periodic_pricing_update_unit_pricing_monthly_form_ajax($form, &$form_state) {
  return $form['bat_update_pricing'];
}

/**
 * Submit callback for bat_periodic_pricing_update_unit_pricing_monthly_form form.
 */
function bat_periodic_pricing_update_unit_pricing_monthly_form_submit($form, &$form_state) {
  $unit_id = $form_state['values']['unit_id'];
  $amount = $form_state['values']['amount'];
  $operation = $form_state['values']['operation'];

  $year = $form_state['values']['year'];
  $start_month = $form_state['values']['start_month'];
  $end_month = $form_state['values']['end_month'];

  $start_date = new DateTime($year . '-' . $start_month . '-01');
  $end_date = clone($start_date);
  $end_date->modify('+' . ($end_month - $start_month + 1) . ' months - 1 day');

  $rc = new UnitMonthlyPricingCalendar($unit_id);
  $events = $rc->calculatePricingEvents($unit_id, $amount, $start_date, $end_date, $operation, array());

  $rc->updateCalendar($events);
}
