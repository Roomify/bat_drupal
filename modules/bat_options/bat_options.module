<?php

/**
 * @file
 */

define('BAT_OPTIONS_ADD', 'add');
define('BAT_OPTIONS_ADD_DAILY', 'add-daily');
define('BAT_OPTIONS_SUB', 'sub');
define('BAT_OPTIONS_SUB_DAILY', 'sub-daily');
define('BAT_OPTIONS_REPLACE', 'replace');
define('BAT_OPTIONS_INCREASE', 'increase');
define('BAT_OPTIONS_DECREASE', 'decrease');
define('BAT_OPTIONS_NOCHARGE', 'no_charge');
define('BAT_OPTIONS_OPTIONAL', 'optional');
define('BAT_OPTIONS_MANDATORY', 'mandatory');
define('BAT_OPTIONS_ONREQUEST', 'on_request');

/**
 * Page callback to handle AJAX for removing a bat options item.
 *
 * This is a direct page callback. The actual job of deleting the item is
 * done in the submit handler for the button, so all we really need to
 * do is process the form and then generate output. We generate this
 * output by doing a replace command on the id of the entire form element.
 */
function bat_options_remove_js() {
  // drupal_html_id() very helpfully ensures that all html IDS are unique
  // on a page. Unfortunately what it doesn't realize is that the IDs
  // we are generating are going to replace IDs that already exist, so
  // this actually works against us.
  if (isset($_POST['ajax_html_ids'])) {
    unset($_POST['ajax_html_ids']);
  }

  list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();
  drupal_process_form($form['#form_id'], $form, $form_state);

  // Get the information on what we're removing.
  $button = $form_state['triggering_element'];
  // Go two levels up in the form, to the whole widget.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -3));
  // Now send back the proper AJAX command to replace it.
  $commands[] = ajax_command_replace('#' . $element['#id'], drupal_render($element));
  $return = array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );

  // Because we're doing this ourselves, messages aren't automatic. We have
  // to add them.
  $messages = theme('status_messages');
  if ($messages) {
    $return['#commands'][] = ajax_command_prepend('#' . $element['#id'], $messages);
  }

  return $return;
}

/**
 * Returns the available price options for booking_unit options field.
 */
function bat_options_price_options() {
  $options = array(
    BAT_OPTIONS_ADD => t('Add to price'),
    BAT_OPTIONS_ADD_DAILY => t('Add to price per night'),
    BAT_OPTIONS_SUB => t('Subtract from price'),
    BAT_OPTIONS_SUB_DAILY => t('Subtract from price per night'),
    BAT_OPTIONS_REPLACE => t('Replace price'),
    BAT_OPTIONS_INCREASE => t('Increase price by % amount'),
    BAT_OPTIONS_DECREASE => t('Decrease price by % amount'),
    BAT_OPTIONS_NOCHARGE => t('No charge'),
  );

  return $options;
}

/**
 * Returns available options given a Bat type.
 *
 * @param UnitType $type
 *   The type from which to retrieve options.
 *
 * @return array
 *   The available options for the given type.
 */
function bat_options_get_type_options($type) {
  $options = &drupal_static(__FUNCTION__);

  if (isset($options['types'][$type->type_id])) {
    return $options['types'][$type->type_id];
  }

  $type_options = is_array($type->getTranslation('und')->get('field_addons')) ? $type->getTranslation('und')->get('field_addons') : array();
  $options['types'][$type->type_id] = $type_options;

  return $options['types'][$type->type_id];
}

/**
 * Converts option human name to its machine name.
 *
 * @param string $option_name
 *   The human option name.
 * @param string $pattern
 *   The pattern used to convert. By default "/[^a-z0-9_]+/".
 * @param string $replacement
 *   The replacement string. By default "_".
 *
 * @return string
 *   The option machine name.
 */
function bat_options_get_machine_name($option_name, $pattern = '/[^a-z0-9_]+/', $replacement = '_') {
  return preg_replace($pattern, $replacement, drupal_strtolower($option_name));
}

/**
 * Given an option, return a string that explains the operation.
 */
function bat_options_get_operation_label($option) {
  $label = '';

  $currency_setting = commerce_currency_load(commerce_default_currency());
  $currency_symbol = $currency_setting['symbol'];

  switch ($option['operation']) {
    case 'add':
      $label = t('+@amount@currency_symbol to price', array(
        '@amount' => $option['value'],
        '@currency_symbol' => $currency_symbol,
        )
      );
      break;

    case 'add-daily':
      $label = t('+@amount@currency_symbol per night to price', array(
        '@amount' => $option['value'],
        '@currency_symbol' => $currency_symbol,
        )
      );
      break;

    case 'sub-daily':
      $label = t('-@amount@currency_symbol per night from price', array(
        '@amount' => $option['value'],
        '@currency_symbol' => $currency_symbol,
        )
      );
      break;

    case 'replace':
      $label = t('Replace price with @amount@currency_symbol', array(
        '@amount' => $option['value'],
        '@currency_symbol' => $currency_symbol,
        )
      );
      break;

    case 'increase':
      $label = t('Increase price by @amount%', array(
        '@amount' => $option['value'],
        )
      );
      break;

    case 'decrease':
      $label = t('Decrease price by @amount%', array(
        '@amount' => $option['value'],
        )
      );
      break;

    case 'sub':
      $label = t('-@amount@currency_symbol from price', array(
        '@amount' => $option['value'],
        '@currency_symbol' => $currency_symbol,
        )
      );
      break;

  }

  return $label;
}

/**
 * Calculate the price for an option.
 */
function bat_options_get_option_price($booking_price, $option, $quantity, $nights) {
  $price = 0;

  switch ($option['operation']) {
    case BAT_OPTIONS_ADD:
      $price += $option['value'];
      break;

    case BAT_OPTIONS_ADD_DAILY:
      $price += $option['value'] * $nights;
      break;

    case BAT_OPTIONS_SUB:
      $price -= $option['value'];
      break;

    case BAT_OPTIONS_SUB_DAILY:
      $price -= $option['value'] * $nights;
      break;

    case BAT_OPTIONS_REPLACE:
      $price = $option['value'] - ($booking_price / 100);
      break;

    case BAT_OPTIONS_INCREASE:
      $price += $booking_price * $option['value'] / 100;
      break;

    case BAT_OPTIONS_DECREASE:
      $price -= $base_price * $option['value'] / 100;
      break;
  }

  return $price * 100;
}
