<?php

/**
 * @file
 *
 * Manages the display of FullCalendar and provides ways for other modules
 * to easily modify it.
 */

use Drupal\Core\Template\Attribute;

/**
 * The EventManager page access callback.
 *
 * @param $entity_id
 * @param $event_type
 * @param $event_id
 * @param $start_date
 * @param $end_date
 */
function bat_fullcalendar_event_management_access($entity_id, $event_type, $event_id, $start_date, $end_date) {
  if ($event_id == 0) {
    return bat_event_access('create', bat_event_create(array('type' => $event_type->type)));
  }
  else {
    $event = bat_event_load($event_id);
    return bat_event_access('update', $event);
  }
}

/**
 * The EventManager page shows when clicking on an event in the
 * calendar - will allow a user to manipulate that event.
 *
 * @param $entity_id
 * @param $event_type
 * @param $event_id
 * @param $start_date
 * @param $end_date
 */
function bat_fullcalendar_event_management($entity_id, $event_type, $event_id, $start_date, $end_date) {
  // If any info missing we cannot load the event.
  if ($event_id == NULL || $start_date === 0 || $end_date === 0) {
    $output[] = ctools_modal_command_dismiss();
    drupal_set_message(t('Unable to load event.'), 'error');
  }

  $modal_content = \Drupal::moduleHandler()->invokeAll('bat_fullcalendar_modal_content', $entity_id, $event_type, $event_id, $start_date, $end_date);
  $modal_content = array_pop($modal_content);

  if (isset($modal_content['title']) && isset($modal_content['content'])) {
    ctools_modal_render($modal_content['title'], $modal_content['content']);
  }
  elseif (isset($modal_content['commands'])) {
    print ajax_render($modal_content['commands']);
    exit();
  }
}

/**
 * Implements hook_bat_fullcalendar_modal_content();
 */
function bat_fullcalendar_bat_fullcalendar_modal_content($entity_id, $event_type, $event_id, $start_date, $end_date) {
  if ($event_id > 0) {
    // For existing events allow to edit in the modal.
    module_load_include('inc', 'bat_event', 'bat_event.admin');

    $event = bat_event_load($event_id);

    $form_state = array(
      'title' => t('Edit event'),
      'ajax' => TRUE,
      'build_info' => array(
        'args' => array($event),
        'files' => array(
          'bat_event' => array(
            'module' => 'bat_event',
            'name' => 'bat_event.admin',
            'type' => 'inc',
          ),
        ),
      ),
    );

    // Wrap the form via ctools modal.
    $output = ctools_modal_form_wrapper('bat_event_edit_form', $form_state);
    if ($form_state['executed']) {
      if (!empty($form_state['event_deleted'])) {
        // If there are messages for the form, render them.
        $messages = theme('status_messages');

        $output = array();
        // If the form has not yet been rendered, render it.
        $output[] = ctools_modal_command_display(t('Event deleted'), $messages);
      }
      else {
        $output = array(ctools_modal_command_dismiss());
      }
    }

    return array(
      'bat_fullcalendar' => array(
        'commands' => $output,
      ),
    );
  }

  return array(
    'bat_fullcalendar' => array(
      'title' => t('Event Management'),
      'content' => drupal_get_form('bat_fullcalendar_event_manager_form', $entity_id, $event_type, $event_id, $start_date, $end_date),
    ),
  );
}

/**
 * Fullcalendar settings.
 *
 * @param $user_settings
 * @return array
 */
function bat_fullcalendar_configure($user_settings) {
  $settings = array();

  $config = \Drupal::config('bat_fullcalendar.settings');

  foreach ($user_settings['batCalendar'] as $id => $user_setting) {
    // Set the scheduler license
    $schedulerlicense = $config->get('bat_fullcalendar_scheduler_key');
    switch ($schedulerlicense) {
      case 'gpl':
        $schedulerlicensekey = 'GPL-My-Project-Is-Open-Source';
        break;
      case 'non-commercial':
        $schedulerlicensekey = 'CC-Attribution-NonCommercial-NoDerivatives';
        break;
      case 'commercial':
        $schedulerlicensekey = $config->get('bat_fullcalendar_scheduler_commercial_key');
        break;
      case 'none':
        $schedulerlicensekey = '';
        break;
      default:
        $schedulerlicensekey = '';
        break;
    }

    $calendar_views = 'timelineDay, timelineTenDay, timelineMonth, timelineYear';
    $default_view = 'timelineDay';

    if ($user_setting['eventGranularity'] == 'bat_daily') {
      $calendar_views = 'timelineThirtyDay, timelineYear';
      $default_view = 'timelineThirtyDay';

      $default_date = (new DateTime())->modify('-5 days')->format('Y-m-d');
    }
    elseif ($user_setting['eventGranularity']) {
      $calendar_views = 'timelineDay, timelineTenDay, timelineMonth';
      $default_view = 'timelineDay';

      $default_date = (new DateTime())->format('Y-m-d');
    }

    if (isset($user_setting['views']) && !empty($user_setting['views'])) {
      $calendar_views = $user_setting['views'];
    }
    if (isset($user_setting['defaultView']) && !empty($user_setting['defaultView'])) {
      $default_view = $user_setting['defaultView'];
    }

    $business_hours = array(
      'start' => '00:00',
      'end' => '24:00',
      'dow' => array(0, 1, 2, 3, 4, 5, 6),
    );

    $config = array(
      'schedulerLicenseKey' => $schedulerlicensekey,
      'unitType' => '',
      'eventType' => '',
      'eventGranularity' => $user_setting['eventGranularity'],
      'slotWidth' => FALSE,
      'calendarHeight' => 500,
      'editable' => TRUE,
      'selectable' => TRUE,
      'headerLeft' => 'today, prev, next',
      'headerCenter' => 'title',
      'headerRight' => $calendar_views,
      'views' => $calendar_views,
      'defaultView' => $default_view,
      'viewsTimelineDayButtonText' => ':15 slots',
      'viewsTimelineDaySlotDuration' => '00:15',
      'viewsTimelineSevenDayButtonText' => '7 days',
      'viewsTimelineSevenDaySlotDuration' => array('days' => 7),
      'viewsTimelineTenDayButtonText' => '10 days',
      'viewsTimelineTenDaySlotDuration' => array('days' => 10),
      'viewsTimelineThirtyDayButtonText' => '30 days',
      'viewsTimelineThirtyDaySlotDuration' => array('days' => 30),
      'resourceAreaWidth' => '25%',
      'resourceLabelText' => 'Types',
      'errorMessage' => t('Action not allowed. User may not have the right permissions.'),
      'businessHours' => $business_hours,
      'selectConstraint' => NULL,
      'minTime' => '00:00:00',
      'maxTime' => '24:00:00',
      'hiddenDays' => array(),
      'defaultDate' => $default_date,
      'repeatEventTitle' => TRUE,
    );

    $settings['batCalendar'][$id] = array_replace_recursive($config, $user_setting);

    // Allow other modules to alter further.
    \Drupal::moduleHandler()->alter('bat_calendar_settings', $settings);
  }

  return $settings;
}

/**
 * Sets up JS files for fullcalendar and calls an alter to allow other modules to change them
 *
 * @param array $user_js_files
 * @return array
 */
function bat_fullcalendar_set_js_files($user_js_files = array()) {

  if (count($user_js_files) > 0) {
    $js_files = $user_js_files;
  }
  else {
    $js_files = array(
      drupal_get_path('module', 'bat_fullcalendar') . '/js/bat_fullcalendar_timeline.js'
    );
  }

  // Provide alter hook to change calendar js files.
  \Drupal::moduleHandler()->alter('bat_fullcalendar_render_js', $js_files);

  return $js_files;
}

/**
 * Sets up CSS files for fullcalendar and calls an alter to allow other modules to change them
 *
 * @param array $user_css_files
 * @return array
 */
function bat_fullcalendar_set_css_files($user_css_files = array()) {

  if (count($user_css_files) > 0) {
    $css_files = $user_css_files;
  }
  else {
    $css_files = array(
      drupal_get_path('module', 'bat_fullcalendar') . '/css/bat_fullcalendar_timeline.css',
      drupal_get_path('module', 'bat_fullcalendar') . '/css/fullcalendar.theme.css',
    );
  }

  // Provide alter hook to change calendar css files
  \Drupal::moduleHandler()->alter('bat_fullcalendar_render_css', $css_files);

  return $css_files;
}

/**
 * Theme function for FullCalendar
 */
function template_preprocess_bat_fullcalendar(&$variables) {
  $calendar_id = $variables['calendar_settings']['calendar_id'];
  $modal_style = $variables['calendar_settings']['modal_style'];
  $user_settings = $variables['calendar_settings']['user_settings'];

  // Check if user has defined js files and swap those in
  if (!empty($variables['js_files'])) {
    $js_files = bat_fullcalendar_set_js_files($variables['js_files']);
  }
  else {
    $js_files = bat_fullcalendar_set_js_files();
  }

  // Check for CSS fiels
  if (!empty($variables['css_files'])) {
    $css_files = bat_fullcalendar_set_css_files($variables['css_files']);
  }
  else {
    $css_files =  bat_fullcalendar_set_css_files();
  }

  // Attributes
  if (!empty($variables['attributes'])) {
    $attributes = $variables['attributes'];
  }
  else {
    $attributes = array(
      'id' => 'calendar',
      'class' => array(
        'calendar-set',
        'clearfix',
      ),
    );

    if (isset($variables['calendar_settings']['class']) && !empty($variables['calendar_settings']['class'])) {
      $attributes['class'] = array_merge($attributes['class'], $variables['calendar_settings']['class']);
    }
  }

  // Override default settings with ones coming form user
  $settings = bat_fullcalendar_configure($variables['calendar_settings']['user_settings']);

  bat_fullcalendar_modal_style($modal_style);

  $attributes = new Attribute($attributes);

  $variables['#attached'] = array(
    'library' => array('bat_fullcalendar/fullcalendar-scheduler'),
    'drupalSettings' => $settings,
  );

  $variables['content'] = array('#markup' => '<div' . $attributes->__toString() . '></div>');
}

/**
 * Implements hook_theme().
 */
function bat_fullcalendar_theme($existing, $type, $theme, $path) {
  return array(
    'bat_fullcalendar' => array(
      'variables' => array(
        'calendar_settings' => array(NULL),
        'js_files' => array(),
        'css_files' => array(),
        'attributes' => array(),
      ),
    ),
  );
}

/**
 * Define modal JS style and dependencies.
 *
 * @param $style
 */
function bat_fullcalendar_modal_style($style = 'default') {
  // Styles to use for the modal.
  $modal_style = array(
    'bat-modal-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 520,
        'height' => 520,
        'addWidth' => 0,
        'addHeight' => 0,
      ),
      'modalOptions' => array(
        'opacity' => .0,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
    ),
  );

  // Allow other modules to change the modal style
  \Drupal::moduleHandler()->alter('bat_fullcalendar_modal_style', $modal_style);
}
